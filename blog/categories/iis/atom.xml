<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IIS | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/iis/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Deployment Tool]]></title>
    <link href="http://mkmurray.com/blog/2009/09/29/web-deployment-tool/"/>
    <updated>2009-09-29T17:45:00-06:00</updated>
    <id>http://mkmurray.com/blog/2009/09/29/web-deployment-tool</id>
    <content type="html"><![CDATA[<div class='post'>
<p>It appears that the IIS team at Microsoft has officially completed a 1.0 version of the deployment utility I mentioned at the end of <a title="Visual Studio Web Deployment Projects" href="http://murrayon.net/2008/02/visual-studio-web-deployment-projects.html">my previous post about Visual Studio Web Deployment Projects</a> almost two years ago.&#160; It includes a command-line tool named MSDeploy that helps with deploying and syncing web projects across all of the web servers in your server farm.&#160; The installation also includes all kinds of packaging and deployment features that seem really handy.&#160; You can even do migrations from IIS 6 to IIS 7 or package your apps to be distributed via the <a href="http://www.microsoft.com/web/downloads/platform.aspx">Microsoft Web Platform Installer</a>.</p>  <p>I thought that maybe the tool creates MSI installers, but it appears the package may actually just be a ZIP file that you can import and export through the IIS Manager or various other command-line tools or PowerShell Cmdlets.</p>  <p>Here is the page where you can read more about the toolset and download the installer:&#160; <a title="http://www.iis.net/extensions/WebDeploymentTool" href="http://www.iis.net/extensions/WebDeploymentTool">http://www.iis.net/extensions/WebDeploymentTool</a></p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IIS 7 and ASP.NET Providers (Membership, Roles, and Profile)]]></title>
    <link href="http://mkmurray.com/blog/2009/02/17/iis-7-and-asp-net-providers-membership-roles-and-profile/"/>
    <updated>2009-02-17T17:38:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/02/17/iis-7-and-asp-net-providers-membership-roles-and-profile</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I talked at length about the ASP.NET <a href="http://en.wikipedia.org/wiki/Provider_model">Provider Model pattern</a> and the ease of implementing several built-in services you can have for free with ASP.NET 2.0 in <a title="ASP.NET Providers - Membership, Role, and Profile" href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">my previous series of posts</a>.&#160; In this post, I will be discussing the advantages of using the ASP.NET Provider system under IIS 7 found in Windows Vista and Server 2008.&#160; I will also talk about an issue with using this Provider system to try and add authentication to an ASP.NET website that contains non-ASP.NET content, like static HTML pages.&#160; I think I'll start with the discussion about non-ASP.NET content first.</p> <span class='fullpost'> <h3>IIS 7.0 Integrated Pipeline</h3>  <p>Since I don't really understand much about <a title="Internet Server Application Programming Interface" href="http://en.wikipedia.org/wiki/ISAPI">ISAPI</a> filters and such, I'm just going to quote stuff from random pages on the <a href="http://www.iis.net/">official Microsoft IIS site</a>:</p>  <blockquote>   <p>&quot;IIS 6.0 and previous versions allowed the development of .NET application components via the ASP.NET platform. ASP.NET integrated with IIS via an ISAPI extension, and exposed its own application and request processing model. This effectively exposed two separate server pipelines, one for native ISAPI filters and extension components, and another for managed application components. ASP.NET components would execute entirely inside the ASP.NET ISAPI extension bubble and only for requests mapped to ASP.NET in the IIS script map configuration.</p>    <p>&quot;IIS 7.0 integrates the ASP.NET runtime with the core web server, providing a unified request processing pipeline that is exposed to both native and managed components known as modules.&quot;</p> </blockquote>  <p>and...</p>  <blockquote>   <p>&quot;This allows developers to fully extend the IIS 7.0 server with the richness of ASP.NET 2.0 and the .NET Framework, instead of using the lower level IIS C++ APIs. Existing ASP.NET applications also immediately benefit from tighter integration using existing ASP.NET features like Forms Authentication, Roles, and Output Caching for all content.&quot;</p> </blockquote>  <p>Note the last three words there:&#160; &quot;<font face="Courier New">for all content.</font>&quot;&#160; When I started this endeavor to implement the ASP.NET Provider system, I didn't realize that it would really only apply to ASP.NET content and pages.&#160; I didn't realize on IIS 6 I would have to fiddle with ISAPI filters and content filters to make my implementation work.&#160; And when I tried to doing a mapping (like <font face="Courier New">*.html</font> to the ASP.NET ISAPI DLL), I either didn't do it right or it just isn't very reliable and stable; here is a link to <a title="IIS problems with forms authentication &amp; HTML pages" href="http://forums.asp.net/t/1184547.aspx">the thread I followed in trying to make the appropriate changes in IIS 6</a>.&#160; I will note however that <a href="http://www.ultidev.com/products/Cassini/index.htm">UltiDev's Cassini Web Server</a> can host such a site with absolutely no extra modification, where even IIS 7 required a little configuration.</p>  <p>By default in IIS 7, an <a title="IIS and ASP.NET: The Application Pool" href="http://www.developer.com/net/asp/article.php/2245511">application pool</a> runs using the <font face="Courier ne">Integrated</font> mode for the <font face="Courier New">Managed Pipeline</font> configuration.&#160; But there is also the option of <font face="Courier New">Classic</font> mode, which is helpful if you are needing strict compatibility with how you ran a website under IIS 6.&#160; In many cases, however, an existing ASP.NET website runs under <font face="Courier New">Integrated</font> mode without any problems.</p>  <h3>Configuring an ASP.NET Website to Run on IIS 7</h3>  <p>First, I think I will point you to a great video and document on Microsoft's official IIS site that explains everything you really need to know.&#160; Then I will emphasize a few of the important points and also a gotcha or two.&#160; Here are the links you should reference:</p>  <ul>   <li><a href="http://learn.iis.net/page.aspx/377/using-aspnet-forms-authentication/">Using ASP.NET Forms Authentication</a> (video) </li>    <li><a href="http://learn.iis.net/page.aspx/243/aspnet-integration-with-iis7/">ASP.NET Integration with IIS 7.0</a> </li> </ul>  <p>The video above is also a terrific introduction to IIS 7.&#160; Below is a screenshot of IIS's UI for configuring a website:</p>  <p><a href="http://lh6.ggpht.com/_rps657FzHZ0/SZtZDNleinI/AAAAAAAAACw/b2kq_6XIGD8/s1600-h/IIS_screenshot%5B5%5D.png"><img style="border-right-width: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="IIS_screenshot" src="http://lh5.ggpht.com/_rps657FzHZ0/SZtZDjlrIRI/AAAAAAAAAC0/cC29GwiAIhk/IIS_screenshot_thumb%5B3%5D.png?imgmax=800" width="475" height="368" /></a> </p>  <p>Notice the <font face="Courier New">ASP.NET</font> section and how it's able to use your Providers to bring back Users, Roles, and Profile data back from the database.&#160; This UI reads from and writes to your <font face="Courier New">Web.config</font> and is really slick in my opinion.</p>  <p>The only real &quot;breaking change&quot; for running your website under IIS 7 is the fact that your <font face="Courier New">Web.config</font> might need a little migration to be compatible with <font face="Courier New">Integrated</font> mode.&#160; Apparently IIS gives you helpful error messages if it detects you haven't run through the migration yet.&#160; The two most common things that ASP.NET websites have that require this migration are if you have declared <font face="Courier New">httpModules</font> or <font face="Courier New">httpHandlers</font> in your <font face="Courier New">Web.config</font>.&#160; The fix is to either copy or move these sections under <font face="Courier New">system.web</font> to their corresponding <font face="Courier New">system.webServer</font> sections.&#160; If you duplicate the sections, then you should be able run under both <font face="Courier New">Integrated</font> and <font face="Courier New">Classic</font> modes without any problems.&#160; You can even still run on IIS 6 I believe, as IIS 6 will ignore this new section called <font face="Courier New">system.webServer</font> which is IIS 7 specific.&#160; IIS 7 even provides a utility that can perform this migration for you; here is the what you would type in a Command Prompt:</p>  <p><font face="Courier New">%windir%\system32\inetsrv\APPCMD.EXE migrate config &lt;Application Path&gt;</font></p>  <p>...where <font face="Courier New">&lt;Application Path&gt;</font> would be something like <font face="Courier New">&quot;Default Web Site/&quot;</font> or <font face="Courier New">&quot;Default Web Site/someApp&quot;</font>.&#160; If you manually migrate your <font face="Courier New">Web.config</font> and are still getting migration error messages, here is a snippet you can add right under the <font face="Courier New">system.webServer</font> node to disable the error message:</p>  <p><font face="Courier New">&lt;validation validateIntegratedModeConfiguration=&quot;false&quot; /&gt;</font></p>  <p>Also, I want to make note of something I couldn't get to work that they showed in the tutorial video.&#160; At about the <font face="Courier New">13:50</font> mark in the video, they go into the <font face="Courier New">Modules</font> section of the UI.&#160; These are the modules of the IIS pipeline for both managed .NET code and unmanaged code.&#160; In order to make their video file hidden behind ASP.NET Forms Authentication, they change a property on two authentication modules to allow these modules to execute on non-managed content as well.&#160; However, this did not work for me for some reason when I was trying to secure HTML pages behind Forms Authentication.&#160; What did work for me (and may have been a drastic solution) was to put the following attribute on the <font face="Courier New">modules</font> node under <font face="Courier New">system.webServer</font>:</p>  <p><font face="Courier New">&lt;modules runAllManagedModulesForAllRequests=&quot;true&quot; /&gt;</font></p>  <p>I believe the issue in my case was their was another few managed modules that I needed to clear that checkbox for in the UI.&#160; But I didn't take the time to find out which ones I was missing and opted for the drastic solution.&#160; I will also say there is a way to configure these managed modules through your <font face="Courier New">Web.config</font> so you don't have to have your IT Admin configure properties manually in the UI.&#160; In fact, it seems that much of IIS 7 configuration for your website can be done this way.</p>  <h3>A Few Error Messages (and Their Solutions)</h3>  <p>If you get error messages while using the IIS Manager user interface like this...</p>  <blockquote>   <p>&quot;This feature cannot be used because the default provider type could not be determined to check whether it is a trusted provider.</p>    <p>&quot;You can use this feature only when the default provider is a trusted provider.&#160; If you are a server administrator, you can make a provider a trusted provider by adding the provider type to the trusted providers list in the Administration.config file.&#160; The provider has to be strongly typed and added to the GAC (Global Assembly Cache).&quot;</p> </blockquote>  <p>...then you should visit the following article for detailed information about resolving the error message:</p>  <ul>   <li><a href="http://www.iis.net/ConfigReference/system.webServer/management/trustedProviders/add">Adding Management Trusted Providers &lt;add&gt;</a> </li> </ul>  <p>Getting rid of this error message is really only for convenience in letting the IIS Manager UI be able to query your database using your providers and give you a basic view of your Membership, Roles, and Profile fields.&#160; Also, if you are trying to find your <font face="Courier New">Administration.config</font> file, it is likely located under the <font face="Courier New">C:\Windows\System32\inetsrv\config\</font> folder.</p>  <p>The other error message I received was not in the IIS Manager UI, but rather when you attempt to view your website in a browser (after you think you got all the configuration bugs out!).&#160; A <font face="Courier New">BadImageFormatException</font> is thrown and the error details say something like this:</p>  <p><font face="Courier New">Could not load file or assembly 'AssemlyNameHere' or one of its dependencies.&#160; An attempt was made to load a program with an incorrect format.</font></p>  <p>The likely cause of this error is that the assembly referenced in the error message was compiled only for 32-bit machines and you are running a 64-bit operating system.&#160; With Windows Server 2008 x64, the application pools in IIS have an <font face="Courier New">Advanced Setting</font> called <font face="Courier New">Enable 32-Bit Applications</font>, that is disabled by default.&#160; Enable this setting and you're probably good to go.&#160; See the following link for more detailed information and some nice screenshots:</p>  <ul>   <li><a href="http://blog.crowe.co.nz/archive/2007/11/05/Could-not-load-file-or-assembly-name-or-one-of.aspx">Could not load file or assembly 'name' or one of its dependencies</a> </li> </ul>  <h3>Additional Reading</h3>  <p>I just barely noticed that <a href="http://www.4guysfromrolla.com/">4GuysFromRolla.com</a> recently posted an article about the exact same stuff I was attempting to explain.&#160; To read additional details about IIS 7's Integrated Pipeline and ASP.NET Forms Authentication with static content, check out the following link:</p>  <ul>   <li><a href="http://aspnet.4guysfromrolla.com/articles/122408-1.aspx">Apply ASP.NET Authentication and Authorization Rules to Static Content with IIS 7.0's Integrated Pipeline Feature</a> </li> </ul>  <h3>Conclusion</h3>  <p>I hope you've enjoyed <a title="ASP.NET Providers - Membership, Role, and Profile" href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">this series on the ASP.NET Provider System</a>.&#160; My desire is that you've found these posts helpful in getting you started with implementing such a versatile and customizable model for adding common membership and authorization functionality to your new and existing websites.&#160; There are quite a few advantages in hosting your site on IIS 7 in Windows Server 2008, as I've outlined in this specific post.&#160; Hopefully these discussions about errors and gotchas will also help you get going in no time!</p> </span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Thanks. Awesome job.</div>
</div>
<div class='comment'>
<div class='author'>Tony</div>
<div class='content'>
Prefect article and thanks for the video links. It helped me understand this whole integrated vs classic iis7 mode and was a refresher on forms authenication.</div>
</div>
<div class='comment'>
<div class='author'>Radek</div>
<div class='content'>
Thanks. This post helped me resolved serious issue with IIS7</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Providers - Membership, Role, and Profile]]></title>
    <link href="http://mkmurray.com/blog/2009/01/30/asp-net-providers-membership-role-and-profile/"/>
    <updated>2009-01-30T14:18:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/01/30/asp-net-providers-membership-role-and-profile</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Seems like any website you start nowadays involves creating the same common features we see all over the web.&#160; These include creating user account functionality, storing profile information, implementing role-based access to content and features, instantiating SQL tables and data access repositories, and so on, so forth.&#160; In most cases it would be a complete waste of time and money to roll your own implementation every time.</p>  <p>There are plenty of frameworks out there that tackle this problem for you and abstract out details you shouldn't have to worry about.&#160; If you are in the .NET world, there are a set of these services available to you that are baked right into the .NET 2.0 Framework.&#160; I'm going to show you a personal example of how easy it is to add some of this functionality to an existing site, even one with an antique and cumbersome architecture.&#160; Implementing these features using the ASP.NET 2.0 Provider Model on said architecture has convinced me that it couldn't be easier to add such functionality to a website, no matter what beast of a site you are dealing with.</p> <span class='fullpost'> <h3>ASP.NET 2.0 Provider Model</h3> <p>With the advent of ASP.NET 2.0, Microsoft introduced a set of configuration-driven services that adhere to the <a href="http://en.wikipedia.org/wiki/Provider_model">Provider Model pattern</a>.&#160; These services focus on storing application state of a website using a very flexible and extensible data access strategy.&#160; The available features that can be added to your website include Membership (which includes authentication and authorization), Role Management, Profile, Session State, Web Parts Personalization, and Site Map navigation.&#160; The whole idea is to be able to secure and enhance an existing site by dropping in a few lines into the <font face="Courier New">Web.config</font>, using a Microsoft utility to automatically create database tables (most likely your chosen storage medium), and then dropping, configuring, and skinning a few controls into your existing pages.&#160; To read a more thorough introduction to the Provider Model and these ASP.NET 2.0 Provider services (including a few helpful diagrams), check out the following link:</p>  <ul>   <li><a href="http://msdn.microsoft.com/en-us/library/aa479030.aspx">ASP.NET 2.0 Provider Model: Introduction to the Provider Model</a> </li> </ul>  <h3>Personal Example</h3>  <p>We currently maintain a series of desktop products that we have been entrusted with.&#160; Under the covers, these &quot;desktop&quot; products were originally written in Java as locally-hosted websites using Apache's web server.&#160; In order to be compatible with Windows Vista, we have since ported these products to .NET 2.0 and currently use <a href="http://www.ultidev.com/products/Cassini/index.htm">UltiDev's free, light-weight, and redistributable web server named Cassini</a> (essentially the same thing as the development web server found in Visual Studio and a great alternative to <a title="Internet Information Services" href="http://en.wikipedia.org/wiki/Internet_Information_Services">IIS</a>).&#160; Many of the features are implemented in JavaScript and the content is almost entirely static HTML pages.&#160; There were only a few Java Servlets that we ported to .NET HTTP Handlers and any database storage has been done using Microsoft Access databases.&#160; This set of products also has other interaction requirements like the ability to view content from another product while staying in the context of the currently open product.&#160; Finally, the installers for a few of these desktop products are getting to be nearly 600 MB in size, which has perpetuated the need for distributing the products to the users offline.</p>  <p>We are in the process right now of exploring the cost benefits and customer experience improvements in moving this set of offerings to an online suite of websites.&#160; The first step we are taking is to build an online version of one of the products where users can obtain a user account to view the content.&#160; Building new applications is one thing, but upgrading and maintaining existing applications (especially ones you have inherited) is a whole different development experience.&#160; This is where my appreciation for the ease and flexibility of what Microsoft is offering comes into play.</p>  <h3>Read On!</h3>  <p>The rest of the blog posts in this series can be found at the following links:</p>  <ul>   <li><a href="http://murrayon.net/2009/01/aspnet-providers-getting-started.html">ASP.NET Providers - Getting Started</a> </li>    <li><a href="http://murrayon.net/2009/01/aspnet-providers-membership.html">ASP.NET Providers - Membership</a> </li>    <li><a href="http://murrayon.net/2009/02/aspnet-providers-role-management.html">ASP.NET Providers - Role Management</a> </li>    <li><a href="http://murrayon.net/2009/02/aspnet-providers-profile.html">ASP.NET Providers - Profile</a> </li> </ul>  <p>In addition, I came across an issue when using the Profile system with the <font face="Courier New">Web Application</font> project template instead of the <font face="Courier New">Web Site</font> project template as found in Visual Studio's default set of project templates.&#160; It has to do with the <font face="Courier New">Profile</font> proxy class object not being auto-generated by Visual Studio when using the <font face="Courier New">Web Application</font> project template.&#160; Read the following blog post for a discussion of the problem and it's solution:</p>  <ul>   <li><a href="http://murrayon.net/2009/02/aspnet-profile-and-web-application.html">ASP.NET Profile and Web Application Projects</a> </li> </ul>  <p>Also, I have another post discussing the advantages of using the ASP.NET Provider system under IIS 7 found in Windows Vista and Server 2008; it will also include some issues with using this system if some of your content is static HTML instead of ASPX pages.&#160; You can find all of this goodness by following the link below:</p>  <ul>   <li><a href="http://murrayon.net/2009/02/iis-7-and-aspnet-providers-membership.html">IIS 7 and ASP.NET Providers (Membership, Roles, and Profile)</a> </li> </ul>  <p>Finally, I based my implementation on a 13-part tutorial series by <a href="http://www.4guysfromrolla.com/ScottMitchell.shtml">Scott Mitchell</a> on <a href="http://www.4guysfromrolla.com/">4GuysFromRolla.com</a>, starting at this link:</p>  <ul>   <li><a href="http://aspnet.4guysfromrolla.com/articles/120705-1.aspx">Examining ASP.NET 2.0's Membership, Roles, and Profile - Part 1</a> </li> </ul>  <p>Enjoy!</p> </span>  </div>

]]></content>
  </entry>
  
</feed>
