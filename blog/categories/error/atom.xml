<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Error | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/error/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LINQ Query Syntax and Type Argument Inference]]></title>
    <link href="http://mkmurray.com/blog/2010/12/03/linq-query-syntax-and-type-argument-inference/"/>
    <updated>2010-12-03T15:29:00-07:00</updated>
    <id>http://mkmurray.com/blog/2010/12/03/linq-query-syntax-and-type-argument-inference</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In LINQ, you can query in-memory data collections using <a href="http://msdn.microsoft.com/en-us/library/bb397947.aspx">Method Syntax (the <font face="Courier New">IEnumerable</font> extension methods) or Query Syntax (the SQL-like, declarative syntactic sugar on top of the underlying method calls)</a>.&#160; I was using the query syntax to join a few in-memory collections and then project (like a SQL <font face="Courier New">SELECT</font>) the denormalized data into a new object that only contained a few pieces of information from each of the separate data collections.&#160; The code could look similar to this (we'll go with a shopping example in honor of the upcoming holiday season):</p>  <pre class="brush: csharp">var shoppingLists =
    from person in people
    join wishlist in wishlists on person.Id equals wishlist.personId
    join store in stores on store.Id equals wishlist.storeId
    select new
    {
        PersonName = person.Name,
        StoreName = store.Name,
        NumItems = wishlist.Items.Count
    };</pre>

<p>However, I ran into the following intellisense red squiggly error in the Visual Studio C# code editor on the second <font face="Courier New">join</font> statement:</p>

<blockquote>
  <p><font face="Courier New">The type arguments for method 'IEnumerable&lt;TResult&gt; System.Linq.Enumerable.Join&lt;TOuter,TInner,TKey,TResult&gt;(this IEnumerable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter,TKey&gt;, Func&lt;TInner,TKey&gt;, Func&lt;TOuter,TInner,TResult&gt;)' cannot be inferred from the query.</font></p>
</blockquote>

<p>The error might also end with a statement that says &quot;<font face="Courier New">Try specifiying the type arguments explicitly</font>.&quot;</p>
<span class="fullpost">
  <h3>Let’s Take a Closer Look…</h3>

  <p>The underlying problem is best understood by examining the method signature of the <a href="http://msdn.microsoft.com/en-us/library/bb534675.aspx">LINQ <font face="Courier New">Join</font> extension method</a> and how the LINQ query syntax for the keyword <font face="Courier New">join</font> maps to that method call in the compiler.&#160; The type signature for the extension method is as follows:</p>

  <pre class="brush: csharp">public static IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt;(
    this IEnumerable&lt;TOuter&gt; outer,
    IEnumerable&lt;TInner&gt; inner,
    Func&lt;TOuter,TKey&gt; outerKeySelector,
    Func&lt;TInner,TKey&gt; innerKeySelector,
    Func&lt;TOuter,TInner,TResult&gt; resultSelector)</pre>

  <p>Consistent with all <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a>, it is <font face="Courier New">public static</font> and has a <font face="Courier New">this</font> keyword in front of the first method parameter, allowing you to call the <font face="Courier New">Join</font> method as if it had been declared in the original definition of the <font face="Courier New">IEnumerable&lt;&gt;</font> class or one of its inheriting children classes.</p>

  <p>The first two parameters are the two data collections being joined, and in the case of my LINQ query above, they would be the joined collection of <font face="Courier New">people</font> &amp; <font face="Courier New">wishlists</font> and then the <font face="Courier New">stores</font> collection, respectively.</p>

  <p>The next two method parameters take delegates or lambda expressions that select the key value from each collection participating in the join, <font face="Courier New">outer</font> collection key selector first and then the <font face="Courier New">inner</font> key selector second.&#160; The key values of each item in each collection will compared to each other for equality.&#160; It will use the normal definition of the <font face="Courier New">Equals</font> method for your object type (or if you specified a custom one in your class definition), or there is another <font face="Courier New">Join</font> extension method signature that takes in another method parameter that an object that conforms to the <font face="Courier New"><a href="http://msdn.microsoft.com/en-us/library/ms132151.aspx">IEqualityComparer&lt;TKey&gt; <font face="Arial">interface</font></a></font>.&#160; The key selectors from our LINQ query sample would be the two member access expressions in the &quot;<font face="Courier New">on store.Id equals wishlist.storeId</font><font face="Arial">&quot; statement.</font></p>

  <p>The last parameter is a delegate or lambda expression that takes in a item from each participating data collection and projects the items into a new form (like the <font face="Courier New">Select</font> LINQ query method and its SQL equivalent).&#160; The two items being passed into the <font face="Courier New">Func</font> have passed the equality comparison of each item’s key value, exactly the same as how rows from two tables match up in an <font face="Courier New">inner join</font> statement in SQL.</p>

  <p>As for the <a href="http://msdn.microsoft.com/en-us/library/0zk36dx2.aspx">generic type parameters</a> in this extension method definition, <font face="Courier New">TOuter</font> and <font face="Courier New">TInner</font> are the types from the two collections participating in the join.&#160; <font face="Courier New">TKey</font> is the type returned by the key selectors; notice that in order to compare the equality of each key selected, they need to be of the same type.&#160; In our example, <font face="Courier New">TKey</font> is likely <font face="Courier New">int</font> or <font face="Courier New">long</font> (or maybe <font face="Courier New">Guid</font>) since we’re dealing with <font face="Courier New">Id</font> properties of all of our objects.&#160; <font face="Courier New">TResult</font> is the type returned by the projection <font face="Courier New">Func&lt;TOuter,TInner,TResult&gt; resultSelector</font>; in our case, we returned an <a href="http://msdn.microsoft.com/en-us/library/bb397696.aspx">anonymous type</a> consisting of three properties (<font face="Courier New">PersonName</font>, <font face="Courier New">StoreName</font>, and <font face="Courier New">NumItems</font>).</p>

  <h3>Ok, So Where Did I Screw Up Then?</h3>

  <p>To answer this, let’s take a look one more time at my LINQ query syntax, how it would map to LINQ method syntax, and the <font face="Courier New">Join</font> method signature again all side-by-side:</p>

  <pre class="brush: csharp; highlight: [4,19,20]">var shoppingLists =
    from person in people
    join wishlist in wishlists on person.Id equals wishlist.personId
    join store in stores on store.Id equals wishlist.storeId
    select new
    {
        PersonName = person.Name,
        StoreName = store.Name,
        NumItems = wishlist.Items.Count
    };

// Equivalent LINQ method syntax
var shoppingLists2 = people
    .Join(wishlists,
        person =&gt; person.Id,
        wishlist =&gt; wishlist.personId,
        (person, wishlist) =&gt; new { person, wishlist })
    .Join(stores,
        store =&gt; store.Id,
        something =&gt; something.wishlist.storeId,
        (obj, store) =&gt; new
        {
            PersonName = obj.person.Name,
            StoreName = store.Name,
            NumItems = obj.wishlist.Items.Count
        });

public static IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt;(
    this IEnumerable&lt;TOuter&gt; outer,
    IEnumerable&lt;TInner&gt; inner,
    Func&lt;TOuter,TKey&gt; outerKeySelector,
    Func&lt;TInner,TKey&gt; innerKeySelector,
    Func&lt;TOuter,TInner,TResult&gt; resultSelector)</pre>

  <p>The issue is lines 19 and 20 above; they need to be switched.&#160; The compiler can’t properly infer the generic type parameters because we have our key selectors out of order in the argument list when invoking the <font face="Courier New">Join</font> method.&#160; If you wanted to be explicit about your generic type parameters assignments, then <font face="Courier New">Join&lt;TOuter, TInner, TKey, TResult&gt;</font> would be <font face="Courier New">Join&lt;Temp1, Store, int, Temp2&gt;</font>, where <font face="Courier New">Temp1</font> and <font face="Courier New">Temp2</font> represent the magical type definitions that the compiler creates underneath the covers when you use anonymous types in your C# code.&#160; Notice the <font face="Courier New">outerKeySelector</font> needs to come before the <font face="Courier New">innerKeySelector</font>.&#160; It appears the &quot;<font face="Courier New">on store.Id equals wishlist.storeId</font><font face="Arial">&quot; syntax is not a </font><a href="http://en.wikipedia.org/wiki/Commutativity">commutative operation</a>.</p>

  <p>One last thing, I just realized that the error(s) given in Visual Studio when you actually compile the code are different than the intellisense red squiggly error message.&#160; It appears an actual build of the code is able to be a little more omniscient than the quick compile that intellisense does as you type.&#160; The error (and intelligent suggestion) the compiler offers says something like this:</p>

  <blockquote>
    <p><font face="Courier New">The name 'store' is not in scope on the left side of 'equals'.&#160; Consider swapping the expressions on either side of 'equals'.</font></p>
  </blockquote>

  <h3>Additional Info</h3>

  <p>While reading the <a href="http://msdn.microsoft.com/en-us/library/bb534675.aspx">MSDN article on the LINQ <font face="Courier New">Join</font> method</a>, I thought the &quot;<font face="Courier New">Remarks</font><font face="Arial">&quot;</font> section has some really great stuff about deferred execution, default equality comparison, differences from <font face="Courier New">SelectMany</font>, sort order perseverance, and so on:</p>

  <blockquote>
    <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <strong>GetEnumerator</strong> method directly or by using foreach in Visual C# or For Each in Visual Basic.</p>

    <p>The default equality comparer, <a href="http://msdn.microsoft.com/en-us/library/ms224763.aspx">Default</a>, is used to hash and compare keys.</p>

    <p>A join refers to the operation of correlating the elements of two sources of information based on a common key. <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx">Join</a> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of <strong>SelectMany</strong>, which requires more than one method call to perform the same operation.</p>

    <p><a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx">Join</a> preserves the order of the elements of outer, and for each of these elements, the order of the matching elements of inner.</p>

    <p>In query expression syntax, a join (Visual C#) or Join (Visual Basic) clause translates to an invocation of <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx">Join</a>.</p>

    <p>In relational database terms, the <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx">Join</a> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.groupjoin.aspx">GroupJoin</a> method. See <a href="http://msdn.microsoft.com/en-us/library/bb397908.aspx">Join Operations</a>.</p>
  </blockquote>

  <p>Thanks, I hope this proves helpful to someone, as it was certainly eye-opening to me.</p>
</span></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variable Declaration Restrictions]]></title>
    <link href="http://mkmurray.com/blog/2009/09/23/variable-declaration-restrictions/"/>
    <updated>2009-09-23T16:09:00-06:00</updated>
    <id>http://mkmurray.com/blog/2009/09/23/variable-declaration-restrictions</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I came across a surprising restriction on variable declarations that I thought I would share.</p>  <p>My own investigation into C# was prompted by <a title="Declaring variables inside a switch statement - Stack Overflow" href="http://stackoverflow.com/questions/1231198/declaring-variables-inside-a-switch-statement/1231209#1231209">an answer given to a Stack Overflow question regarding an odd Objective-C compiler error</a>.&#160; The answer seemed to allude to a language specification somewhere that doesn’t allow variable declarations in one-liner embedded statements of control structures (loops, <font face="Courier New">switch</font> statements, <font face="Courier New">if-else</font> statements, etc.).&#160; Not only that, Objective-C wasn’t unique in this restriction; it appears Java and even C itself have had this restriction for quite a while as well.</p>  <p>Naturally this got my curiosity going and I decided to see if C# had also carried over such a restriction.&#160; The answer is yes; it appears that Java, C#, and Objective-C have all kept this language restriction from their common ancestor C.&#160; Let’s get right to what it looks like:</p> <span class='fullpost'> <p><a href="http://lh5.ggpht.com/_rps657FzHZ0/SrqdKFwyBLI/AAAAAAAAADA/8fajE6RTF0o/s1600-h/code_screenshot%5B6%5D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="code_screenshot" border="0" alt="code_screenshot" src="http://lh3.ggpht.com/_rps657FzHZ0/SrqdKaU74uI/AAAAAAAAADE/HGin3AOsrsM/code_screenshot_thumb%5B4%5D.png?imgmax=800" width="416" height="712" /></a> </p>  <p>The red-underlined errors read “<font face="Courier New">embedded statement cannot be a declaration or labeled statement</font>” and the green-underlined warnings read “<font face="Courier New">the variable ‘i’ is assigned but its value is never used</font>.”&#160; You’ve probably seen the warning quite a few times before, but the compiler error really caught me by surprise.&#160; I mean it makes sense that declaring a variable in the one-line body of a control structure is pointless, as it would immediately go out of scope (and usefulness) after declared.&#160; But I thought it odd for the compiler to actually deny such a program statement, as if it put the compiler in an invalid state or maybe it was somehow dangerous.</p>  <p>One thing I do want to point out that appears to be different from the other languages (or at the very least Objective-C) is that the variable declaration is allowed in the <font face="Courier New">switch</font> statement, as illustrated in the image above.</p>  <p>To figure out why this isn’t allowed, I decided to actually look into the <a href="http://msdn.microsoft.com/en-us/vcsharp/aa336809.aspx">C# 3.0 Language Specification</a> to see if there were any comments or explanations regarding this issue.&#160; I ended up finding the C# language grammar in Appendix B.&#160; I was able to parse through the grammar and find this restriction in the grammar itself.&#160; Take a look:</p>  <p><strong>B.2.5 </strong><a name="_Toc174237894"><strong>Statements</strong></a></p>  <div><em>statement: </em></div>  <div style="margin-left: 40px"><em>labeled-statement      <br />declaration-statement       <br />embedded-statement</em></div>  <p></p>  <div><em>embedded-statement: </em></div>  <div style="margin-left: 40px"><em>block      <br />empty-statement       <br />expression-statement       <br />selection-statement       <br />iteration-statement       <br />jump-statement       <br />try-statement       <br />checked-statement       <br />unchecked-statement       <br />lock-statement       <br />using-statement       <br />yield-statement</em></div>  <p></p>  <div><em>block: </em></div>  <div style="margin-left: 40px">{<em> statement-list<sub>optional</sub></em> }</div>  <p></p>  <div><em>statement-list: </em></div>  <div style="margin-left: 40px"><em>statement      <br />statement-list statement</em></div>  <p>...</p>  <div><em>selection-statement: </em></div>  <div style="margin-left: 40px"><em>if-statement      <br />switch-statement</em></div>  <p></p>  <div><em>if-statement: </em></div>  <div style="margin-left: 40px">if ( <em>boolean-expression</em> ) <em>embedded-statement</em>     <br />if ( <em>boolean-expression</em> ) <em>embedded-statement</em> else <em>embedded-statement</em></div>  <p></p>  <div><em>switch-statement: </em></div>  <div style="margin-left: 40px">switch ( <em>expression</em> ) <em>switch-block</em></div>  <p></p>  <div><em>switch-block: </em></div>  <div style="margin-left: 40px">{ <em>switch-sections<sub>optional</sub></em> }</div>  <p></p>  <div><em>switch-sections: </em></div>  <div style="margin-left: 40px"><em>switch-section      <br />switch-sections switch-section</em></div>  <p></p>  <div><em>switch-section: </em></div>  <div style="margin-left: 40px"><em>switch-labels statement-list</em></div>  <p></p>  <div><em>switch-labels: </em></div>  <div style="margin-left: 40px"><em>switch-label      <br />switch-labels switch-label</em></div>  <p></p>  <div><em>switch-label: </em></div>  <div style="margin-left: 40px">case <em>constant-expression</em> :     <br />default :</div>  <p>...</p>  <p>You’ll notice that there is the concept of a <font face="Courier New">statement</font> and an <font face="Courier New">embedded-statement</font>; also note that <font face="Courier New">statement</font> is a superset of <font face="Courier New">embedded-statement</font>, adding two other types of statements: <font face="Courier New">labeled-statement</font> and <font face="Courier New">declaration-statement</font>.&#160; If a particular grammar rule requires an <font face="Courier New">embedded-statement</font>, then those two latter types of statements are not allowed in that context.&#160; If we wanted to allow those two statement types, our grammar rule should specify the generic <font face="Courier New">statement</font> category instead.</p>  <p>Also noteworthy is that an <font face="Courier New">embedded-statement</font> can resolve to a <font face="Courier New">block</font>, which includes braces around a <font face="Courier New">statement-list</font>.&#160; A <font face="Courier New">statement-list</font> is one or more <font face="Courier New">statement</font> entities, which would now allow us to use the two statement types excluded from <font face="Courier New">embedded-statement</font>.</p>  <p>Something interesting that is not included in the grammar snippet above, the following statement constructs (and language keywords) require the <font face="Courier New">block</font> statement construct, bypassing the option of a grammar resolution to <font face="Courier New">embedded-statement</font> directly and allowing you to leave off surrounding braces: <font face="Courier New">try</font>, <font face="Courier New">catch</font>, <font face="Courier New">finally</font>, <font face="Courier New">checked</font>, and <font face="Courier New">unchecked</font>.</p>  <p>Almost all of the other statement constructs allow you the option of a one-liner <font face="Courier New">embedded-statement</font> (or which can be resolved into a <font face="Courier New">block</font>), including <font face="Courier New">if</font>, <font face="Courier New">if-else</font>, <font face="Courier New">while</font>, <font face="Courier New">do-while</font>, <font face="Courier New">for</font>, and <font face="Courier New">foreach</font>.&#160; The one surprising exception is the <font face="Courier New">switch</font> construct, which allows for a <font face="Courier New">statement-list</font> after each <font face="Courier New">switch-label</font>.&#160; As a side note, this allows you to put useless braces (via <font face="Courier New">block</font>) around your <font face="Courier New">statement-list</font> (or anywhere inside it) after any of your <font face="Courier New">switch-label</font> statements if you wanted.&#160; But back to the point, these facts explain the existence of (and in one case, lack of) compiler errors regarding embedded statements in the code screenshot near the top.</p>  <p>Now you will know exactly what the compiler means when it gives you the error that an “<font face="Courier New">embedded statement cannot be a declaration or labeled statement.</font>”</p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Server Express 2005 Remote Connections]]></title>
    <link href="http://mkmurray.com/blog/2009/02/19/sql-server-express-2005-remote-connections/"/>
    <updated>2009-02-19T10:36:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/02/19/sql-server-express-2005-remote-connections</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I developed an ASP.NET site connecting to a local SQL Server Express 2005 instance on my development box.&#160; To further my informal testing, I wanted to host the site under IIS 7 on a Windows Server 2008 box, but I wanted to just use the same database remotely.&#160; I got the following error message when the site tried to hit the database:</p>  <blockquote>   <p>&quot;An error has occurred while establishing a connection to the server.&#160; When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections.&#160; (provider: Named Pipes Provider, error: 40 - Could not open connection to SQL Server)&quot;</p> </blockquote>  <p>Apparently SQL Server Express 2005 is not automatically configured for remote access during installation (which really isn't surprising as it is the Express version).&#160; Remote connections can be enabled though with a few relatively painless steps.&#160; See the following link for the procedure:</p>  <ul>   <li><a href="http://www.datamasker.com/SSE2005_NetworkCfg.htm">Configuring SQL Server Express 2005 for Remote Access when SQL Server does not allow remote connections</a></li> </ul>  <p>Hope this is helpful.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IIS 7 and ASP.NET Providers (Membership, Roles, and Profile)]]></title>
    <link href="http://mkmurray.com/blog/2009/02/17/iis-7-and-asp-net-providers-membership-roles-and-profile/"/>
    <updated>2009-02-17T17:38:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/02/17/iis-7-and-asp-net-providers-membership-roles-and-profile</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I talked at length about the ASP.NET <a href="http://en.wikipedia.org/wiki/Provider_model">Provider Model pattern</a> and the ease of implementing several built-in services you can have for free with ASP.NET 2.0 in <a title="ASP.NET Providers - Membership, Role, and Profile" href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">my previous series of posts</a>.&#160; In this post, I will be discussing the advantages of using the ASP.NET Provider system under IIS 7 found in Windows Vista and Server 2008.&#160; I will also talk about an issue with using this Provider system to try and add authentication to an ASP.NET website that contains non-ASP.NET content, like static HTML pages.&#160; I think I'll start with the discussion about non-ASP.NET content first.</p> <span class='fullpost'> <h3>IIS 7.0 Integrated Pipeline</h3>  <p>Since I don't really understand much about <a title="Internet Server Application Programming Interface" href="http://en.wikipedia.org/wiki/ISAPI">ISAPI</a> filters and such, I'm just going to quote stuff from random pages on the <a href="http://www.iis.net/">official Microsoft IIS site</a>:</p>  <blockquote>   <p>&quot;IIS 6.0 and previous versions allowed the development of .NET application components via the ASP.NET platform. ASP.NET integrated with IIS via an ISAPI extension, and exposed its own application and request processing model. This effectively exposed two separate server pipelines, one for native ISAPI filters and extension components, and another for managed application components. ASP.NET components would execute entirely inside the ASP.NET ISAPI extension bubble and only for requests mapped to ASP.NET in the IIS script map configuration.</p>    <p>&quot;IIS 7.0 integrates the ASP.NET runtime with the core web server, providing a unified request processing pipeline that is exposed to both native and managed components known as modules.&quot;</p> </blockquote>  <p>and...</p>  <blockquote>   <p>&quot;This allows developers to fully extend the IIS 7.0 server with the richness of ASP.NET 2.0 and the .NET Framework, instead of using the lower level IIS C++ APIs. Existing ASP.NET applications also immediately benefit from tighter integration using existing ASP.NET features like Forms Authentication, Roles, and Output Caching for all content.&quot;</p> </blockquote>  <p>Note the last three words there:&#160; &quot;<font face="Courier New">for all content.</font>&quot;&#160; When I started this endeavor to implement the ASP.NET Provider system, I didn't realize that it would really only apply to ASP.NET content and pages.&#160; I didn't realize on IIS 6 I would have to fiddle with ISAPI filters and content filters to make my implementation work.&#160; And when I tried to doing a mapping (like <font face="Courier New">*.html</font> to the ASP.NET ISAPI DLL), I either didn't do it right or it just isn't very reliable and stable; here is a link to <a title="IIS problems with forms authentication &amp; HTML pages" href="http://forums.asp.net/t/1184547.aspx">the thread I followed in trying to make the appropriate changes in IIS 6</a>.&#160; I will note however that <a href="http://www.ultidev.com/products/Cassini/index.htm">UltiDev's Cassini Web Server</a> can host such a site with absolutely no extra modification, where even IIS 7 required a little configuration.</p>  <p>By default in IIS 7, an <a title="IIS and ASP.NET: The Application Pool" href="http://www.developer.com/net/asp/article.php/2245511">application pool</a> runs using the <font face="Courier ne">Integrated</font> mode for the <font face="Courier New">Managed Pipeline</font> configuration.&#160; But there is also the option of <font face="Courier New">Classic</font> mode, which is helpful if you are needing strict compatibility with how you ran a website under IIS 6.&#160; In many cases, however, an existing ASP.NET website runs under <font face="Courier New">Integrated</font> mode without any problems.</p>  <h3>Configuring an ASP.NET Website to Run on IIS 7</h3>  <p>First, I think I will point you to a great video and document on Microsoft's official IIS site that explains everything you really need to know.&#160; Then I will emphasize a few of the important points and also a gotcha or two.&#160; Here are the links you should reference:</p>  <ul>   <li><a href="http://learn.iis.net/page.aspx/377/using-aspnet-forms-authentication/">Using ASP.NET Forms Authentication</a> (video) </li>    <li><a href="http://learn.iis.net/page.aspx/243/aspnet-integration-with-iis7/">ASP.NET Integration with IIS 7.0</a> </li> </ul>  <p>The video above is also a terrific introduction to IIS 7.&#160; Below is a screenshot of IIS's UI for configuring a website:</p>  <p><a href="http://lh6.ggpht.com/_rps657FzHZ0/SZtZDNleinI/AAAAAAAAACw/b2kq_6XIGD8/s1600-h/IIS_screenshot%5B5%5D.png"><img style="border-right-width: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="IIS_screenshot" src="http://lh5.ggpht.com/_rps657FzHZ0/SZtZDjlrIRI/AAAAAAAAAC0/cC29GwiAIhk/IIS_screenshot_thumb%5B3%5D.png?imgmax=800" width="475" height="368" /></a> </p>  <p>Notice the <font face="Courier New">ASP.NET</font> section and how it's able to use your Providers to bring back Users, Roles, and Profile data back from the database.&#160; This UI reads from and writes to your <font face="Courier New">Web.config</font> and is really slick in my opinion.</p>  <p>The only real &quot;breaking change&quot; for running your website under IIS 7 is the fact that your <font face="Courier New">Web.config</font> might need a little migration to be compatible with <font face="Courier New">Integrated</font> mode.&#160; Apparently IIS gives you helpful error messages if it detects you haven't run through the migration yet.&#160; The two most common things that ASP.NET websites have that require this migration are if you have declared <font face="Courier New">httpModules</font> or <font face="Courier New">httpHandlers</font> in your <font face="Courier New">Web.config</font>.&#160; The fix is to either copy or move these sections under <font face="Courier New">system.web</font> to their corresponding <font face="Courier New">system.webServer</font> sections.&#160; If you duplicate the sections, then you should be able run under both <font face="Courier New">Integrated</font> and <font face="Courier New">Classic</font> modes without any problems.&#160; You can even still run on IIS 6 I believe, as IIS 6 will ignore this new section called <font face="Courier New">system.webServer</font> which is IIS 7 specific.&#160; IIS 7 even provides a utility that can perform this migration for you; here is the what you would type in a Command Prompt:</p>  <p><font face="Courier New">%windir%\system32\inetsrv\APPCMD.EXE migrate config &lt;Application Path&gt;</font></p>  <p>...where <font face="Courier New">&lt;Application Path&gt;</font> would be something like <font face="Courier New">&quot;Default Web Site/&quot;</font> or <font face="Courier New">&quot;Default Web Site/someApp&quot;</font>.&#160; If you manually migrate your <font face="Courier New">Web.config</font> and are still getting migration error messages, here is a snippet you can add right under the <font face="Courier New">system.webServer</font> node to disable the error message:</p>  <p><font face="Courier New">&lt;validation validateIntegratedModeConfiguration=&quot;false&quot; /&gt;</font></p>  <p>Also, I want to make note of something I couldn't get to work that they showed in the tutorial video.&#160; At about the <font face="Courier New">13:50</font> mark in the video, they go into the <font face="Courier New">Modules</font> section of the UI.&#160; These are the modules of the IIS pipeline for both managed .NET code and unmanaged code.&#160; In order to make their video file hidden behind ASP.NET Forms Authentication, they change a property on two authentication modules to allow these modules to execute on non-managed content as well.&#160; However, this did not work for me for some reason when I was trying to secure HTML pages behind Forms Authentication.&#160; What did work for me (and may have been a drastic solution) was to put the following attribute on the <font face="Courier New">modules</font> node under <font face="Courier New">system.webServer</font>:</p>  <p><font face="Courier New">&lt;modules runAllManagedModulesForAllRequests=&quot;true&quot; /&gt;</font></p>  <p>I believe the issue in my case was their was another few managed modules that I needed to clear that checkbox for in the UI.&#160; But I didn't take the time to find out which ones I was missing and opted for the drastic solution.&#160; I will also say there is a way to configure these managed modules through your <font face="Courier New">Web.config</font> so you don't have to have your IT Admin configure properties manually in the UI.&#160; In fact, it seems that much of IIS 7 configuration for your website can be done this way.</p>  <h3>A Few Error Messages (and Their Solutions)</h3>  <p>If you get error messages while using the IIS Manager user interface like this...</p>  <blockquote>   <p>&quot;This feature cannot be used because the default provider type could not be determined to check whether it is a trusted provider.</p>    <p>&quot;You can use this feature only when the default provider is a trusted provider.&#160; If you are a server administrator, you can make a provider a trusted provider by adding the provider type to the trusted providers list in the Administration.config file.&#160; The provider has to be strongly typed and added to the GAC (Global Assembly Cache).&quot;</p> </blockquote>  <p>...then you should visit the following article for detailed information about resolving the error message:</p>  <ul>   <li><a href="http://www.iis.net/ConfigReference/system.webServer/management/trustedProviders/add">Adding Management Trusted Providers &lt;add&gt;</a> </li> </ul>  <p>Getting rid of this error message is really only for convenience in letting the IIS Manager UI be able to query your database using your providers and give you a basic view of your Membership, Roles, and Profile fields.&#160; Also, if you are trying to find your <font face="Courier New">Administration.config</font> file, it is likely located under the <font face="Courier New">C:\Windows\System32\inetsrv\config\</font> folder.</p>  <p>The other error message I received was not in the IIS Manager UI, but rather when you attempt to view your website in a browser (after you think you got all the configuration bugs out!).&#160; A <font face="Courier New">BadImageFormatException</font> is thrown and the error details say something like this:</p>  <p><font face="Courier New">Could not load file or assembly 'AssemlyNameHere' or one of its dependencies.&#160; An attempt was made to load a program with an incorrect format.</font></p>  <p>The likely cause of this error is that the assembly referenced in the error message was compiled only for 32-bit machines and you are running a 64-bit operating system.&#160; With Windows Server 2008 x64, the application pools in IIS have an <font face="Courier New">Advanced Setting</font> called <font face="Courier New">Enable 32-Bit Applications</font>, that is disabled by default.&#160; Enable this setting and you're probably good to go.&#160; See the following link for more detailed information and some nice screenshots:</p>  <ul>   <li><a href="http://blog.crowe.co.nz/archive/2007/11/05/Could-not-load-file-or-assembly-name-or-one-of.aspx">Could not load file or assembly 'name' or one of its dependencies</a> </li> </ul>  <h3>Additional Reading</h3>  <p>I just barely noticed that <a href="http://www.4guysfromrolla.com/">4GuysFromRolla.com</a> recently posted an article about the exact same stuff I was attempting to explain.&#160; To read additional details about IIS 7's Integrated Pipeline and ASP.NET Forms Authentication with static content, check out the following link:</p>  <ul>   <li><a href="http://aspnet.4guysfromrolla.com/articles/122408-1.aspx">Apply ASP.NET Authentication and Authorization Rules to Static Content with IIS 7.0's Integrated Pipeline Feature</a> </li> </ul>  <h3>Conclusion</h3>  <p>I hope you've enjoyed <a title="ASP.NET Providers - Membership, Role, and Profile" href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">this series on the ASP.NET Provider System</a>.&#160; My desire is that you've found these posts helpful in getting you started with implementing such a versatile and customizable model for adding common membership and authorization functionality to your new and existing websites.&#160; There are quite a few advantages in hosting your site on IIS 7 in Windows Server 2008, as I've outlined in this specific post.&#160; Hopefully these discussions about errors and gotchas will also help you get going in no time!</p> </span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Thanks. Awesome job.</div>
</div>
<div class='comment'>
<div class='author'>Tony</div>
<div class='content'>
Prefect article and thanks for the video links. It helped me understand this whole integrated vs classic iis7 mode and was a refresher on forms authenication.</div>
</div>
<div class='comment'>
<div class='author'>Radek</div>
<div class='content'>
Thanks. This post helped me resolved serious issue with IIS7</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Correctly Using Random Number Generators]]></title>
    <link href="http://mkmurray.com/blog/2008/12/01/correctly-using-random-number-generators/"/>
    <updated>2008-12-01T17:13:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/12/01/correctly-using-random-number-generators</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Today I read another guy's blog post that reminded me of my own &quot;Aha!&quot; moment I had a while back with Random Number Generators.&#160; It's something I will never forget about Random Number Generators but taken for granted, realizing that it might not be obvious to everyone how these objects are intended to be used.&#160; Here is the blog entry that I read about creating and seeding a Random Number Generator once:</p>  <p><a title="http://silverlight.net/blogs/msnow/archive/2008/12/01/silverlight-tip-of-the-day-77-creating-an-efficient-random-generator.aspx" href="http://silverlight.net/blogs/msnow/archive/2008/12/01/silverlight-tip-of-the-day-77-creating-an-efficient-random-generator.aspx">http://silverlight.net/blogs/msnow/archive/2008/12/01/silverlight-tip-of-the-day-77-creating-an-efficient-random-generator.aspx</a></p>  <p>However, I must admit that I think <a title="Mike Snow" href="http://silverlight.net/blogs/msnow/about.aspx">Mike Snow</a> should have titled his post something similar to the title of my post.&#160; And I will tell you why...</p> <span class='fullpost'> <p>In the MSDN documentation that Mike quotes, there is a key sentence everyone needs to take note of, as you can ignorantly introduce bugs into your code:</p>  <blockquote>   <p>&quot;As a result, different Random objects that are created in close succession by a call to the default constructor will have identical default seed values and, therefore, will produce identical sets of random numbers.&quot;</p> </blockquote>  <p>I have actually build a piece of code where this has happened.&#160; I wrote a <font face="Courier New">for</font> loop that iterated quickly enough that the construction of the <font face="Courier New">Random</font> objects resulted in identical random number seeds.&#160; The result was that I asked for several random numbers in quick succession and got the same exact &quot;random&quot; number across all my requests each time I ran the code.&#160; So not only did I get &quot;identical sets of random numbers,&quot; but I got identical random numbers.</p>  <p>As Mike Snow and the MSDN documentation states (and from my own experience), Random Number Generators are designed to be constructed once and intended to live long and prosper within your application.&#160; It can serve <u>all</u> of the random number needs within your application (i.e., you don't need a different Random Number Generator for different use cases or different object types).&#160; All you need is a one-time created random number seed and then you can forever generate random numbers of any type and within any range of numbers.&#160; I can't currently think of a situation when you may need to reseed your Random Number Generator.&#160; Let me know if you think of one.</p> </span>  </div>

]]></content>
  </entry>
  
</feed>
