<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Build | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/build/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Setup Bootstrappers]]></title>
    <link href="http://mkmurray.com/blog/2009/11/11/custom-setup-bootstrappers/"/>
    <updated>2009-11-11T15:03:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/11/11/custom-setup-bootstrappers</id>
    <content type="html"><![CDATA[<div class='post'>
<p>At work, we have a line of desktop products for one of clients installed on the user’s Windows machine via MSI installers.&#160; We use Visual Studio Setup Projects to create the MSI installers.&#160; Visual Studio also provides the ability to create setup bootstrappers to make sure the user has all the prerequisites needed for the MSI install technology and any dependencies required by your desktop product.&#160; These bootstrappers are unmanaged code, because you can’t always depend on the .NET framework already being there (at least not until everyone is off of XP and lower).&#160; I have developed a solution that has worked for the last year or more, but has felt clumsy and slapped together.&#160; Recently I found the <a href="http://dotnetinstaller.codeplex.com/">open source project called dotNetInstaller</a> which has better provided me with the control and flexibility I need for custom logic during bootstrap and install time.&#160; I’ll first introduce you to my “hack” solution.</p> <span class="fullpost">   <p>It has been difficult for me to find ways to tie into the bootstrapper logic workflow to add in custom logic during installs, and Visual Studio is very rigid in its flexibility and basic in its configuration options in this regard.&#160; Until recently, I had settled on writing managed, C# code for this custom logic meant to run before or after the MSI installer, and then creating another unmanaged <font face="Courier New">setup.exe</font> bootstrapper to ensure the .NET framework was installed just so that executable could run.&#160; So the user would run this new unmanaged <font face="Courier New">setup.exe</font> bootstrapper (making sure .NET framework was installed), which would then call my managed custom logic executable, which would then call the MSI installer’s unmanaged, Visual Studio-generated <font face="Courier New">setup.exe</font> bootstrapper (ensuring more prerequisites were installed), which would then finally install the MSI, and which would then lastly return to my managed custom logic executable for any post-install, clean up logic.&#160; I describe this solution in full (and how to generate the same bootstrappers that Visual Studio creates using MSBuild outside the IDE) in a StackOverflow.com answer that I submitted:</p>    <p><a title="http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846" href="http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846">http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846</a></p>    <p>Well, recently I found the <a href="http://dotnetinstaller.codeplex.com/">dotNetInstaller project on CodePlex.com</a> and have found it to be the control and flexibility I need for custom logic when bootstrapping installers.&#160; Not only does it give you great control over prerequisite install order, it also gives you the ability to run code after MSI install and to also filter on CPU architecture types, OS versions, and other registry or file system conditions.&#160; I have currently setup branching scenarios for the prerequisites based on if the user has a 32-bit (x86) or 64-bit (x64) OS.&#160; This utility will even let you brand the bootstrapper with a banner and icon, which is a change of pace from the plain and unlabeled bootstrapper that Visual Studio and MSBuild produce.</p>    <p>If you have custom bootstrapping needs, I have to highly recommend you give dotNetInstaller a look.&#160; Hopefully it will prove as flexible and powerful for your needs as it has for mine.</p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Profile and Web Application Projects]]></title>
    <link href="http://mkmurray.com/blog/2009/02/11/asp-net-profile-and-web-application-projects/"/>
    <updated>2009-02-11T15:08:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/02/11/asp-net-profile-and-web-application-projects</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I talked at length about the ASP.NET <a href="http://en.wikipedia.org/wiki/Provider_model">Provider Model pattern</a> and the ease of implementing several built-in services you can have for free with ASP.NET 2.0 in <a title="ASP.NET Providers - Membership, Role, and Profile" href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">my previous series of posts</a>.&#160; In this post, I will be discussing a few issues I ran into using the Profile system with the <font face="Courier New">Web Application</font> project template instead of the <font face="Courier New">Web Site</font> project template as found in Visual Studio's list of default project templates.</p>  <p>The crux of the issue is that Visual Studio doesn't automatically generate the <font face="Courier New">Profile</font> proxy class object when using the <font face="Courier New">Web Application</font> project template, like it does with the <font face="Courier New">Web Site</font> project template.&#160; This proxy class can be used to obtain access to strongly-typed properties representing the custom Profile fields you specified in your <font face="Courier New">Web.config</font>.&#160; This is a very convenient way to access a user's Profile data, both for authenticated and for anonymous users.</p>  <p>Let's discuss the issue a little further and then I will present a workaround that I found and have successfully implemented in my own project.</p> <span class='fullpost'> <h3>VS Project Templates:&#160; Web Site vs. Web Application</h3>  <p>It appears that Microsoft has tried to differentiate these two project templates as much as possible in Visual Studio 2008.&#160; In 2005, you would go to the <font face="Courier New">New Project</font> dialog window and you would see these two <font face="Courier New">Web</font> project templates side-by-side, wondering what difference it would make if you chose one over the other.&#160; However, in Visual Studio 2008, it appears they reworked this whole dialog and menu system for starting a new project so that you would never see these two project templates side-by-side.&#160; In 2008, you have more than one option in the <font face="Courier New">File</font> menu for starting a project; those options are <font face="Courier New">File | New | Project</font> and <font face="Courier New">File | New | Web Site</font>.&#160; The first option is the one that will get you to the <font face="Courier New">ASP.NET Web Application</font> template, while the second takes you to the <font face="Courier New">ASP.NET Web Site</font> project template.</p>  <p>Now as for the differences between these two templates, I'll outline a few of the main differences and give a little bit of history of how these two templates came to coexist.&#160; The history in a nutshell is that Visual Studio 2005 came out with the <font face="Courier New">Web Site</font> project template to replace the old, but proven project configuration used by ASP.NET 1.x.&#160; In the opinion of many, the old template better encouraged Object-Oriented design practices.&#160; The new template had no project file for explicitly delineating what files where included in the project and namespacing was quite cumbersome, as the only painless design was to let everything pile up into one big default namespace.&#160; A few other changes involved taking ASP.NET back to compiling on the fly at the web server and also drastically changing the organization of UI template and code-behind files.&#160; It appears the intention was to closely mimic the configuration and deployment practices of popular agile languages like PHP and Ruby on Rails.</p>  <p>In the Service Pack 1 of Visual Studio 2005, Microsoft decided to resurrect the older project template under the name of <font face="Courier New">Web Application</font>.&#160; There is evidence to suggest that Microsoft considers this latter project template an &quot;enterprise&quot; project type, as compared to the casual <font face="Courier New">Web Site</font> project template.&#160; With the advent of Visual Studio 2008, it is apparent that Microsoft is committed to supporting both project types for at least a little while.&#160; For a more detailed discussion of the history and differences of these two project templates, I suggest the following blog post by <a href="http://reddnet.net/code/">Stephen M. Redd</a>:</p>  <ul>   <li><a href="http://reddnet.net/code/aspnet-web-site-vs-web-application/">ASP.NET - Web Site vs. Web Application</a></li> </ul>  <h3>Web Profile Builder by Joe Wrobel</h3>  <p>The ability to retrieve and update your custom Profile fields at design time via strongly-typed properties on the <font face="Courier New">Profile</font> proxy class is extremely convenient.&#160; Unfortunately, you get no such compiler and intellisense love if you are using the <font face="Courier New">Web Application</font> project template for your site.</p>  <p>In trying to find a workaround, I came across a <a title="Web Profile Builder for Web Application Projects" href="http://weblogs.asp.net/joewrobel/archive/2008/02/03/web-profile-builder-for-web-application-projects.aspx">blog post by Joe Wrobel introducing a project he worked on to solve this issue</a>.&#160; It's called the <font face="Courier New">Web Profile Builder</font> (here's a <a title="Web Profile Builder" href="http://code.msdn.microsoft.com/WebProfileBuilder/Release/ProjectReleases.aspx">link to it's project page on MSDN Code Gallery</a>) and it was based on a project called the <a href="http://www.codeplex.com/WebProfile">Web Profile Generator</a>, which was a Visual Studio 2005 Add-In project found on <a href="http://www.codeplex.com/">CodePlex</a>.&#160; The latter project seems to have not been worked on in over a year and a half, nor does it seem to be compatible with Visual Studio 2008.&#160; Hence, Joe feeling the need to start up on his own project, with a few improvements on the side of course.</p>  <p>In Joe's introductory post to the project, he mentions he changed the Visual Studio integration from being a plug-in to being an MSBuild Build Task.&#160; The method for incorporating the Build Task into your project is to add a line into your project file (the one with file extension <font face="Courier New">.csproj</font>).&#160; In case you weren't aware, Visual Studio project files are just <a href="http://en.wikipedia.org/wiki/MSBuild">MSBuild</a> build scripts.&#160; For details about where to put this line in the file (and about a message Visual Studio pops up when it detects you've mucked with the project file), be sure to check out <a title="Web Profile Builder for Web Application Projects" href="http://weblogs.asp.net/joewrobel/archive/2008/02/03/web-profile-builder-for-web-application-projects.aspx">Joe's post on the Web Profile Builder project</a>.</p>  <p>There are a couple of other things I need to point out about using the Build Task that weren't entirely clear to me beforehand.&#160; The build task actually generates a C# code file that is intended to be included into your project; once it's generated, you need to go to the <font face="Courier New">Solution Explorer</font> and explicitly add it as a file in your project (one way is through the <font face="Courier New">Add | Existing Item</font> menu option).&#160; One of the main things that helped me decide to use this solution and how to configure it was reading two blog posts from <a href="http://www.codersbarn.com/">Anthony Grace</a>; the second post below has a great excerpt apparently from the <font face="Courier New">Web Profile Builder</font> documentation that explains the process I outlined above in a bit more detail:</p>  <ul>   <li><a href="http://www.codersbarn.com/post/2008/06/ASPNET-Web-Site-versus-Web-Application-Project.aspx">ASP.NET: Web Site versus Web Application Project</a></li>    <li><a href="http://www.codersbarn.com/post/2008/07/10/ASPNET-PayPal-Subscriptions-IPN.aspx">ASP.NET PayPal Subscription IPN</a></li> </ul>  <p>Also, it is not necessary to do the steps in the <font face="Courier New">Extended Usage</font> section of Joe's blog post.&#160; They are optional configuration points in the <font face="Courier New">Web.config</font> where you control the <font face="Courier New">className</font>, <font face="Courier New">nameSpace</font>, <font face="Courier New">directory</font>, and <font face="Courier New">fileName</font> of the auto-generated code file.&#160; Most of the defaults are fine, but in my case I wanted the generated file to end up in an <font face="Courier New">App_Code</font> directory instead of in the root of the project folder.&#160; If you decide to add in this custom configuration, you need to be aware that you must add the following XML namespace to the <font face="Courier New">configuration</font> root element of your <font face="Courier New">Web.config</font>:</p>  <p><font face="Courier New">xmlns=&quot;http://schemas.microsoft.com/.NetConfiguration/v2.0&quot;</font></p>  <p>Finally, it should be noted that if the website you are building is under source control, you will likely want to always keep this auto-generated code file checked out in order to prevent the file from having its <font face="Courier New">Read-Only</font> attribute set when it's checked in.&#160; If you don't have it checked out, the build will throw out a warning and the generated code file will not be regenerated if changes in your <font face="Courier New">Web.config</font> need to be propagated to it.</p>  <h3>Conclusion</h3>  <p>With all of this in place, you should be able to use the Profile proxy class object in your ASPX code-behind files, just as I gave examples of in my <a href="http://murrayon.net/2009/02/aspnet-providers-profile.html">previous post about the ASP.NET Profile system</a>.&#160; Although in my case, I mostly used the static method <font face="Courier New">GetProfile</font> from the auto-generated <font face="Courier New">WebProfile</font><font face="Verdana"> class (the name the Visual Studio Build Task selects by default).</font></p>  <p>As I mentioned when <a title="ASP.NET Providers - Membership, Role, and Profile" href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">I first started the ASP.NET Provider Series of posts</a>, my next blog post will be about some advantages of using this Provider system on IIS 7 and a few issues when your ASP.NET website contains non-ASP.NET content:</p>  <ul>   <li><a href="http://murrayon.net/2009/02/iis-7-and-aspnet-providers-membership.html">IIS 7 and ASP.NET Providers (Membership, Roles, and Profile)</a> </li> </ul> </span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Martena Gaines</div>
<div class='content'>
Web sites are dynamically compiled and source is distributed with them. Web Applications can be compiled into a single DLL and deployed. You cannot use the app_code folder in WAP projects, but you can with WSP.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Problems with a Very Large Visual Studio Deployment Project]]></title>
    <link href="http://mkmurray.com/blog/2008/06/18/build-problems-with-a-very-large-visual-studio-deployment-project/"/>
    <updated>2008-06-18T17:24:00-06:00</updated>
    <id>http://mkmurray.com/blog/2008/06/18/build-problems-with-a-very-large-visual-studio-deployment-project</id>
    <content type="html"><![CDATA[<div class='post'>
<p>So I have been tackling a build problem with some humongous deployment builds in Visual Studio.&#160; In reality, VS Deployment Projects are not ideal for even slightly sophisticated MSI installers; but we've gone far enough down this path that we can't make the switch at the moment.&#160; So please choose something with more control like the <a href="http://wix.sourceforge.net/">Microsoft-sponsored open-source project WiX</a> or a well-established, paid product like <a href="http://www.acresso.com/products/installation/installshield.htm">InstallShield</a>.</p>  <p>So the error I kept getting was &quot;<font face="Courier New">Not enough storage is available to complete this operation</font>&quot; and it would list some file (not the same every time).&#160; It appears the error means the build process ran out of virtual memory or something.&#160; So I found something interesting about default limit of 2 GB for any Windows process and how to raise that limit.&#160; That process is discussed in this post:&#160; <a title="http://murrayon.net/2007/12/building-monster-vs-2005-or-2008.html" href="http://murrayon.net/2007/12/building-monster-vs-2005-or-2008.html">http://murrayon.net/2007/12/building-monster-vs-2005-or-2008.html</a></p> <span class='fullpost'> <p>Well, it has worked on one guy's laptop this whole time and it only worked for about 2 days on my machine (then it started getting an error that said &quot;<font face="Courier New">Unrecoverable build error</font>&quot; and was accompanied with a &quot;<font face="Courier New">Send Error Report</font>&quot; dialog).&#160; I also tried the fix on like 3 other machines without any success at all (in fact many of the machines become highly unstable with the <font face="Courier New">3GB</font> Windows boot switch).&#160; So for 6 months, I couldn't figure out why it would work on that one machine and none of the others.&#160; Well, just recently that guy's laptop joined the domain and started using a domain user account (I have no clue why he wasn't from the beginning, but I digress).&#160; His machine didn't become unstable, but it did quit building our monster deployment build.&#160; We thought we were up a creek with no box to build the MSI installer and a deadline fast approaching.&#160; We got it working on his laptop by going back to a local user account.</p>  <p>Well, that got me thinking about how we could get another PC to be able to do the darn build.&#160; I tried the build on my PC with just a local user account, but that didn't work because I don't currently have the other fix named above.&#160; So I created a virtual machine (in case things got unstable again) and didn't add it to the domain, just to be safe.&#160; I did the fix named above, and am now able to successfully build this MSI install consistently under a local user account without getting the &quot;<font face="Courier New">Not enough storage is available</font>&quot; error message.&#160; The details of this adventure are discussed in this post:&#160; <a title="http://murrayon.net/2007/12/build-error-when-building-very-large-vs.html" href="http://murrayon.net/2007/12/build-error-when-building-very-large-vs.html">http://murrayon.net/2007/12/build-error-when-building-very-large-vs.html</a></p>  <p>Maybe in a few months we'll move this installer build process to WiX and avoid the inflexibility we are running into with Visual Studio Deployment Projects.</p> </span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
I was running into the same 'Unrecoverable build error' when trying to build a VS2008 deployment project. Tried all of the fixes you mentioned - regsrv32, MSDN knowledge base fixes, etc. Nothing worked. Then just on a hunch I went into the $User\AppData\Local\Temp directory and noticed that there were about 6GB of temp files there. Deleted those, and bingo - working build!</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Patch Installers]]></title>
    <link href="http://mkmurray.com/blog/2008/03/24/creating-patch-installers/"/>
    <updated>2008-03-24T12:48:00-06:00</updated>
    <id>http://mkmurray.com/blog/2008/03/24/creating-patch-installers</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Windows Installer Technology allows for MSP Patch installers, which compliment your MSI installers really well.&#160; However, Visual Studio doesn't support the creation of them from within the IDE.&#160; In fact, you have to download the Windows SDK Toolkit and use a utility called <font face="Courier New">MSIMSP</font>.&#160; For this process, you will also need a utility called <font face="Courier New">Orca</font> from the same SDK; when you download the SDK, inside the Bin folder is an <font face="Courier New">Orca.msi</font> installer.</p>  <p>What you do is build the original version of your MSI installer; then you make the necessary changes and/or fixes to your product and recreate another MSI installer representing the new version of your product.&#160; Then you pass these two MSI installers to the <font face="Courier New">MSIMSP</font> utility and it creates an MSP patch installer for you by automatically detecting the binary differences between the two MSI installers.</p> <span class='fullpost'> <p>I used this article as a guide:&#160; <a title="http://www.codeproject.com/KB/install/dotnetpatching.aspx" href="http://www.codeproject.com/KB/install/dotnetpatching.aspx">http://www.codeproject.com/KB/install/dotnetpatching.aspx</a></p>  <p>However, the Platform SDK link in the article is broken, so use this one instead:&#160; <a title="http://www.microsoft.com/downloads/details.aspx?FamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&amp;displaylang=en" href="http://www.microsoft.com/downloads/details.aspx?FamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&amp;displaylang=en">http://www.microsoft.com/downloads/details.aspx?FamilyId=A55B6B43-E24F-4EA3-A93E-40C0EC4F68E5&amp;displaylang=en</a></p>  <p>This isn't the most up-to-date Windows SDK, but the batch script in the CodeProject article relies on this specific versions folder structure (it has everything you need to create the MSP patch installer nicely in one folder, whereas the newest SDK does not).</p>  <p>I did run into a few of the same hiccups that others did (found down below in the comments of the CodeProject article).&#160; Here are links to my posts with the solutions (you'll have to click around each thread to see the problems posted before my posts):</p>  <ul>   <li>These two are in the same thread:      <ul>       <li><a title="http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26&amp;select=2473656#xx2473656xx" href="http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26&amp;select=2473656#xx2473656xx">http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26&amp;select=2473656#xx2473656xx</a> </li>        <li><a title="http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26&amp;select=2474912#xx2474912xx" href="http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26&amp;select=2474912#xx2474912xx">http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26&amp;select=2474912#xx2474912xx</a> </li>     </ul>   </li>    <li><a title="http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;select=2475101#xx2475101xx" href="http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;select=2475101#xx2475101xx">http://www.codeproject.com/KB/install/dotnetpatching.aspx?fid=209224&amp;select=2475101#xx2475101xx</a> </li> </ul>  <p>Also, I had to modify his <font face="Courier New">patch.cmd</font> batch file slightly; a copy of it is pasted below.</p>  <p>This process isn't as effective as it should be if you are trying to difference two Visual Studio created MSI installers.&#160; The <font face="Courier New">MSIMSP</font> utility is very thorough in its comparison of file names, locations, sizes, versions, and every byte of data contained in the files.&#160; It can create a binary difference between the two files in order to minimize as much as possible the patch installer's size and speed.&#160; It even compares the <a href="http://en.wikipedia.org/wiki/8.3_filename">8.3 short filename</a> of every file.&#160; Unfortunately, Visual Studio can be very inconsistent in its assignment of short filenames with the tilde-numbering system (i.e., &quot;<font face="Courier New">FILENA~3.TXT</font>&quot;) if you add, rename, move, or delete even a couple of files from your project.&#160; I often had to manually edit the short filenames in the second MSI using the <font face="Courier New">Orca</font> utility to make the names be consistent between the two versions of the Visual Studio created installers; otherwise, the <font face="Courier New">MSIMSP</font> utility would just blindly include the whole file for patching and inflate the overall size of the MSP patcher.</p>  <p>Good luck and enjoy not having to figure out what the deltas are between the versions of your products!</p>  <div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; overflow: auto; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 750px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4">   <pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; white-space: nowrap; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">if</span> <span style="color: #006080">&quot;%1&quot;</span>==<span style="color: #006080">&quot;&quot;</span> %0 Debug Release Done <br /><br />@SETLOCAL <br />@set path=%path%;<span style="color: #006080">&quot;C:\Program Files\Microsoft Platform SDK\Samples\SysMgmt\Msi\Patching&quot;</span><br />@set PatchTmp=C:\VSTemp<br /><br />:loop <br /><span style="color: #0000ff">if</span> <span style="color: #006080">&quot;%1&quot;</span>==<span style="color: #006080">&quot;Done&quot;</span> goto <span style="color: #0000ff">end</span> <br /><br /><span style="color: #0000ff">if</span> not exist %1\*.msi goto nopatch <br /><span style="color: #0000ff">if</span> not exist TargetImage\%1\*.msi goto nopatch <br /><br />:ok <br />rmdir /s /q %PatchTmp% <br />mkdir %PatchTmp% <br />mkdir %PatchTmp%\TargetImage <br />mkdir %PatchTmp%\UpgradedImage <br />mkdir %PatchTmp%\Patch <br /><br /><span style="color: #0000ff">for</span> %%a <span style="color: #0000ff">in</span> (TargetImage\%1\*.msi) do copy %%a %PatchTmp%\setup.msi <br />msiexec /qb /a %PatchTmp%\setup.msi TARGETDIR=%PatchTmp%\TargetImage /L*v %PatchTmp%\TargetImage\setup.log <br />del %PatchTmp%\setup.msi <br /><br /><span style="color: #0000ff">for</span> %%a <span style="color: #0000ff">in</span> (%1\*.msi) do copy %%a %PatchTmp%\setup.msi <br />msiexec /qb /a %PatchTmp%\setup.msi TARGETDIR=%PatchTmp%\UpgradedImage /L*v %PatchTmp%\UpgradedImage\setup.log <br />del %PatchTmp%\setup.msi <br /><br />copy patch.pcp %PatchTmp% <br />set PatchDir=%CD% <br />chdir %PatchTmp% <br />msimsp -s patch.pcp -p Patch\patch.msp -l Patch\patch.log -f %PatchTmp%\Tmp -d <br /><br />rmdir /s /q %PatchTmp%\TargetImage <br />rmdir /s /q %PatchTmp%\UpgradedImage <br />rmdir /s /q %PatchTmp%\Tmp <br />chdir %PatchDir% <br /><br />mkdir Patch <br />mkdir Patch\%1 <br />copy %PatchTmp%\Patch\*.* Patch\%1\*.* <br />rmdir /s /q %PatchTmp% <br /><br />:nopatch <br />shift <br />goto loop <br /><br />:<span style="color: #0000ff">end</span> <br />pause</pre>
</div>
</span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>pavan</div>
<div class='content'>
if u run the above cmd file,it is going into an infinite loop.</div>
</div>
<div class='comment'>
<div class='author'>pavan</div>
<div class='content'>
ERROR: PatchGUID property is missing from the Properties table of the .pcp file. This is a required property</div>
</div>
<div class='comment'>
<div class='author'>ravish</div>
<div class='content'>
Found the solution...<br />i was missing &quot;/D&quot; option for chdir in my .cmd file</div>
</div>
<div class='comment'>
<div class='author'>ravish</div>
<div class='content'>
Hi Mike,<br />Thanks for the very useful article.<br />While prepating a patch as described above, i am getting following error<br />Failed to create patch.  Error code: 0xC00E5198<br /><br />any idea what can be the problem ?</div>
</div>
<div class='comment'>
<div class='author'>Baburaj</div>
<div class='content'>
Hi I'm getting this error while patching:<BR/><BR/>  ERROR: UpgradedImages.MsiPath 'C:\VSTemp\UpgradedImage\ERP.msi' does not exist.<BR/><BR/><BR/>What could be the reason? I used your patch.cmd file.</div>
</div>
<div class='comment'>
<div class='author'>Mike Murray</div>
<div class='content'>
I think you will find the following link helpful:<BR/><BR/><A HREF="http://forum.installsite.net/index.php?showtopic=15237" REL="nofollow">http://forum.installsite.net/index.php?showtopic=15237</A><BR/><BR/>I think you will find the whole website InstallSite.net to be a helpful resource for all questions about installers, especially MSI and MSP installers.</div>
</div>
<div class='comment'>
<div class='author'>daniju</div>
<div class='content'>
Hi michael, thanks for your post is very interesting.<BR/><BR/>I´m trying release step to step, but my problem is the next:<BR/><BR/>***** Log starting: 2008-10-29 10:24:54 *****<BR/><BR/>Input-PCP path                     = 'patch.pcp'<BR/>Patch-MSP path                     = 'Patch\patch.msp'<BR/>Temp Folder                        = 'C:\VSTemp\Tmp\'<BR/>Patch GUID                         = '{91FF215B-112C-42B9-8862-FEE08663EC9C}'<BR/>ListOfPatchGUIDsToReplace          = "none"<BR/>ListOfTargetProductCodes           = '*'<BR/>PatchSourceList                    = 'PatchSourceList'<BR/>AllowProductCodeMismatches         = '1'<BR/>AllowProductVersionMajorMismatches = '1'<BR/>OptimizePatchSizeForLargeFiles     = 'blank'<BR/>ApiPatchingSymbolFlags             = '0x00000000'<BR/>MsiFileToUseToCreatePatchTables    = 'blank'<BR/>SqlCmdToCreatePatchTable           = 'blank'<BR/>SqlCmdToCreatePatchPackageTable    = 'blank'<BR/>SqlCmdToCreateMsiPatchHeadersTable = 'blank'<BR/>DontRemoveTempFolderWhenFinished   = '1'<BR/>IncludeWholeFilesOnly              = '0'<BR/>MinimumRequiredMsiVersion          = '200'<BR/>SEQUENCE_DATA_GENERATION_DISABLED  = 'blank'<BR/>AllowRemoval                       = 'blank'<BR/><BR/>Using internal SQL cmd to create 'Patch' table.<BR/>Using internal SQL cmd to create 'PatchPackage' table.<BR/>Using internal SQL cmd to create 'MsiPatchHeaders' table.<BR/><BR/>     Files differ: 'C:\VSTemp\UpgradedImage\.\AlbumFotos.dll',<BR/>                   'C:\VSTemp\TargetImage\.\AlbumFotos.dll'.<BR/>  Patch file created: FTK=_0E2D0A15B23B989808E6FD64A243497B; temp location=fam1\00002.HDR.<BR/>     Files differ: 'C:\VSTemp\UpgradedImage\.\PruebasPictureBox.dll',<BR/>                   'C:\VSTemp\TargetImage\.\PruebasPictureBox.dll'.<BR/>  Patch file created: FTK=_24E4033462F0482C9B569672F8337663; temp location=fam1\00003.HDR.<BR/>     Files differ: 'C:\VSTemp\UpgradedImage\.\DermaDatos.dll',<BR/>                   'C:\VSTemp\TargetImage\.\DermaDatos.dll'.<BR/>  Patch file created: FTK=_294ABD0349756E66C6CB0D11001752CE; temp location=fam1\00004.HDR.<BR/>     Files differ: 'C:\VSTemp\UpgradedImage\.\CapturaImagenesPruebas.dll',<BR/>                   'C:\VSTemp\TargetImage\.\CapturaImagenesPruebas.dll'.<BR/>  Patch file created: FTK=_5E58F544E2DC940F4F3139031A15DE72; temp location=fam1\00005.HDR.<BR/>     Files differ: 'C:\VSTemp\UpgradedImage\.\PruebasInforme.exe',<BR/>                   'C:\VSTemp\TargetImage\.\PruebasInforme.exe'.<BR/>  Patch file created: FTK=_7328B00680B1965AF0370EF0DE389DBE; temp location=fam1\00006.HDR.<BR/>     Files differ: 'C:\VSTemp\UpgradedImage\.\MotorAlertas.dll',<BR/>                   'C:\VSTemp\TargetImage\.\MotorAlertas.dll'.<BR/>  Patch file created: FTK=_7FBC6D05562B82F2CDC2F1BDBE476432; temp location=fam1\00007.HDR.<BR/>     Files differ: 'C:\VSTemp\UpgradedImage\.\ModoDiapositiva.dll',<BR/>                   'C:\VSTemp\TargetImage\.\ModoDiapositiva.dll'.<BR/>  Patch file created: FTK=_8FEA4D552741B28293ABC797812149CD; temp location=fam1\00008.HDR.<BR/>     Files differ: 'C:\VSTemp\UpgradedImage\.\Derma.exe',<BR/>                   'C:\VSTemp\TargetImage\.\Derma.exe'.<BR/>  Patch file created: FTK=_5260684262CA164CEF0A33F5A94CAC55; temp location=fam1\00009.HDR.<BR/>  ERROR: Since MSI 3.0 will block installation of major upgrade patches with sequencing information, creation of such patches is blocked.<BR/><BR/>***** Log finishing: 2008-10-29 10:25:05 *****<BR/><BR/>What is my problem?? Can you help me, please???<BR/><BR/>Thank you very much</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from VS 2005 to 2008]]></title>
    <link href="http://mkmurray.com/blog/2008/02/28/migrating-from-vs-2005-to-2008/"/>
    <updated>2008-02-28T10:07:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/02/28/migrating-from-vs-2005-to-2008</id>
    <content type="html"><![CDATA[<div class='post'>
<p>So I just finished migrating a whole slew of our large solutions and projects from Visual Studio 2005 to Visual Studio 2008.&#160; The conversion process itself was really simple and painless (and not too time consuming).&#160; There were a few gotchas with our Setup (AKA Deployment) Projects however:</p> <span class='fullpost'> <ol>   <li>It appears that Microsoft moved the location of it's prerequisite packages for the BootStrapper for VS 2008.&#160; Microsoft used to keep them at <font face="Courier New">C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\BootStrapper\Packages</font>, but now in 2008 it looks they have moved them to a more isolated and common location.&#160; The new location is <font face="Courier New">C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bootstrapper\Packages</font>.&#160; When I converted our setup projects to VS 2008 format, some of the prerequisites couldn't be found because of this.&#160; I just went to the old VS 2005 BootStrapper location and copied the folders of the packages I needed to the new VS 2008 location (for example, the <font face="Courier New">MDAC</font> package is under a folder called <font face="Courier New">MDAC28</font>, and it is not in VS 2008's list of packages by default anymore). </li>    <li>We had a folder structure into which we were dropping the <font face="Courier New">Primary Output</font> of a web application in our setup projects.&#160; For a web application project, the <font face="Courier New">Primary Output</font> is the DLL libraries in the <font face="Courier New">bin</font> directory of the web site.&#160; In VS 2005, you would create a <font face="Courier New">bin</font> folder at the root level of the web site and put the <font face="Courier New">Primary Output</font> down a level in the <font face="Courier New">bin</font> folder.&#160; Well, now in VS 2008, it appears that wherever you put the <font face="Courier New">Project Output</font>, the setup project will create a <font face="Courier New">bin</font> folder at that location and put the DLL libraries in that <font face="Courier New">bin</font> folder one level down from where you put the <font face="Courier New">Project Output</font>.&#160; So I had to go back through our setup projects and move the location of those <font face="Courier New">Primary Outputs</font> one level up (or else it would create a <font face="Courier New">bin </font>folder inside of the <font face="Courier New">bin</font> folder). </li> </ol>  <p>One nice thing about the migration to VS 2008 is that it looks like Microsoft has a new version of the <font face="Courier New">Visual C++ Runtime Libraries</font> prerequisite (I don't know if the libraries are actually any different, but at least the redistributable package and logic are improved).&#160; We have a set of products that have this package as a prerequisite during install.&#160; Every time you ran the installer it would reinstall the package.&#160; It was almost as if it wasn't doing any logic to detect if it already had the package installed.&#160; The following link might be the explanation of why we were seeing this odd behavior (even though it references the <font face="Courier New">MDAC</font> package):&#160; <a title="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=339044&amp;SiteID=1" href="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=339044&amp;SiteID=1">http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=339044&amp;SiteID=1</a></p>  <p>Well, the new <font face="Courier New">Visual C++ Runtime Libraries</font> package works great and doesn't keep reinstalling itself as a prerequisite with every install or update of one of our products that depend on it.</p>  <p><strong><u>FOLLOWUP (06/19/08)</u></strong>:&#160; Actually, we ended it up having to revert back to the <font face="Courier New">Visual C++ Runtime Libraries</font> from Visual Studio 2005, as another prerequisite we were using (<a href="http://www.dtsearch.com/">DTSearch</a>) wasn't compatible with the new C++ libraries with VS 2008.&#160; We'll check again next year.</p> </span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
This is extraordinary!  As per comment your post 2, folder structure.<br /><br />I am actually moving straight from 2005 to 2010, and had come across just this problem.  I hadn&#39;t thought it might actually emanate from 2008 in the first place.  And this was the only thread I could find covering just this.  I am in process of moving the POs one level up...</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Your number 2 post regarding folder structure was the first I&#39;ve seen of its kind.  I was particularly confused since each converted solution I tried gave a Parser error.  I&#39;ve been researching this issue for days why our 2005 solutions haven&#39;t been converted to 2008 successfully.  Thanks so much for posting this info!</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
