<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP.NET Providers - Role Management]]></title>
    <link href="http://mkmurray.com/blog/2009/02/05/asp-net-providers-role-management/"/>
    <updated>2009-02-05T16:45:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/02/05/asp-net-providers-role-management</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This blog post is part of a series about the ASP.NET Providers (namely Membership, Role Management, and Profile). The introductory post in the series can be found at the following link, which introduces the <a href="http://en.wikipedia.org/wiki/Provider_model">Provider Model pattern</a> and gives a personal example of an implementation I have been working on:</p>  <ul>   <li><a href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">ASP.NET Providers - Membership, Role, and Profile</a> </li> </ul>  <p>This post will deal with adding Role Management to your website.</p> <span class='fullpost'> <h3>Role Management</h3>  <p>Creating roles and assigning users accounts to them is a great way to group users together under similar permissions and abilities.&#160; The ASP.NET Roles Management service allows you to restrict page viewing (or even just certain regions of a page) based on roles you define; you can even apply roles security to specific methods or classes using <a title="Introduction to Attributes (C#)" href="http://msdn.microsoft.com/en-us/library/aa288059(VS.71).aspx">attributes</a>, which I will show an example of a little later.</p>  <p>In order to add role management to your site, add an XML fragment like the one below; the process is much the same as it was with the <a title="ASP.NET Providers - Membership" href="http://murrayon.net/2009/01/aspnet-providers-membership.html">Membership Provider</a>:</p>  <div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 300px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">connectionStrings</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;MyDB&quot;</span> <span style="color: #ff0000">connectionString</span><span style="color: #0000ff">=&quot;...&quot;</span> <span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">connectionStrings</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span>
        ... authentication &amp; authorization settings ...
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">roleManager</span> <span style="color: #ff0000">enabled</span><span style="color: #0000ff">=&quot;true&quot;</span>
                     <span style="color: #ff0000">defaultProvider</span><span style="color: #0000ff">=&quot;ConfiguredRoleProvider&quot;</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">providers</span><span style="color: #0000ff">&gt;</span>
                <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;ConfiguredRoleProvider&quot;</span>
                     <span style="color: #ff0000">type</span><span style="color: #0000ff">=&quot;System.Web.Security.SqlRoleProvider&quot;</span>
                     <span style="color: #ff0000">connectionStringName</span><span style="color: #0000ff">=&quot;MyDB&quot;</span>
                     <span style="color: #ff0000">applicationName</span><span style="color: #0000ff">=&quot;SampleWebSite&quot;</span> <span style="color: #0000ff">/&gt;</span>
            <span style="color: #0000ff">&lt;/</span><span style="color: #800000">providers</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">roleManager</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre></div><p><strong><u>WARNING</u>: </strong>According to Microsoft, you should <strong><u>never</u></strong> use the default provider settings and should <strong><u>always</u></strong> add a new, configured provider; in addition you <strong><u>must</u></strong> be sure to specify the <font face="Courier New">applicationName</font> attribute! See <a href="http://weblogs.asp.net/scottgu/archive/2006/04/22/Always-set-the-_2200_applicationName_2200_-property-when-configuring-ASP.NET-2.0-Membership-and-other-Providers.aspx">Scott Guthrie's blog post on this topic</a> for more details. Apparently, you can also use a value of <font face="Courier New">&quot;/&quot;</font> for the <font face="Courier New">applicationName</font> and it will use the root application name.</p><p>Role names can be used in the <font face="Courier New">Web.config</font> in the same place we used the user class wildcard characters (namely, <font face="Courier New">*</font> for all users and <font face="Courier New">?</font> for anonymous users); the following sample fragment would go under the <font face="Courier New">system.web</font> node:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">deny</span> <span style="color: #ff0000">users</span><span style="color: #0000ff">=&quot;BannedUsers,?&quot;</span> <span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">allow</span> <span style="color: #ff0000">users</span><span style="color: #0000ff">=&quot;PremiumUsers&quot;</span> <span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span></pre></div><p>Role names can be defined by using the <font face="Courier New">ASP.NET Website Administration Tool</font> launched from Visual Studio that I referred to earlier in this series with a post titled <a href="http://murrayon.net/2009/01/aspnet-providers-getting-started.html">ASP.NET Providers - Getting Started</a>.&#160; You can also use this utility to assign users to one or more roles.&#160; Roles can be programmatically assigned and verified in code as well, using the provided <font face="Courier New">Roles</font> .NET API.</p><h3>Attribute-based Role Management</h3><p>In order to put authorization rules on classes or methods, you use the attribute named <font face="Courier New">PrincipalPermission</font>.&#160; Here is a sample that contains a method only accessible by a user with the username of <font face="Courier New">administrator</font>&#160;<u>AND</u> in the role group <font face="Courier New">Admin</font>:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">[PrincipalPermission(SecurityAction.Demand, Name=<span style="color: #006080">&quot;administrator&quot;</span>, Role=<span style="color: #006080">&quot;Admin&quot;</span>)]
<span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> SomeMethod(...)
{
    ...
}</pre></div><p>The <u>OR</u> version of the above logic (meaning the user account being verified need only satisfy one of these authorization rules) would be represented like this:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">[PrincipalPermission(SecurityAction.Demand, Name=<span style="color: #006080">&quot;administrator&quot;</span>)]
[PrincipalPermission(SecurityAction.Demand, Role=<span style="color: #006080">&quot;Admin&quot;</span>)]
<span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> SomeOtherMethod(...)
{
    ...
}</pre></div><p>Here is an interesting sample that restricts a page to authenticated users (those not visiting anonymously); you would put the attribute on the code-behind of an ASPX page, like this example for <font face="Courier New">SomePage.aspx</font>:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">using</span> System.Security.Permissions;

[PrincipalPermission(SecurityAction.Demand, Authenticated=<span style="color: #0000ff">true</span>)]
<span style="color: #0000ff">public</span> <span style="color: #0000ff">partial</span> <span style="color: #0000ff">class</span> SomePage : System.Web.UI.Page
{
    ...
}</pre></div><p>In all of these cases, if the authorization criteria is not met, a <font face="Courier New">SecurityException</font> is thrown.&#160; You would want to catch that exception and perform alternate logic or display a more user-friendly error message.</p><h3>Read On!</h3><p>Continue onward by reading the next blog post in this series found at the following link:</p><ul><li><a href="http://murrayon.net/2009/02/aspnet-providers-profile.html">ASP.NET Providers - Profile</a> </li></ul>
</span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Providers - Membership]]></title>
    <link href="http://mkmurray.com/blog/2009/01/30/asp-net-providers-membership/"/>
    <updated>2009-01-30T14:21:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/01/30/asp-net-providers-membership</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This blog post is part of a series about the ASP.NET Providers (namely Membership, Role Management, and Profile). The introductory post in the series can be found at the following link, which introduces the <a href="http://en.wikipedia.org/wiki/Provider_model" target="_blank">Provider Model pattern</a> and gives a personal example of an implementation I have been working on:</p><ul><li><a href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">ASP.NET Providers - Membership, Role, and Profile</a></li></ul><p>This post will deal with adding the Membership functionality to your website.</p> <span class='fullpost'> <h3>Membership Provider Configuration</h3><p>Now that your DB is set up, there are a few snippets that need to be added to your <span style="font-family: courier new">Web.config</span>. It involves adding a connection string and adding a new membership provider, as in the sample below:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 350px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">connectionStrings</span><span style="color: #0000ff">&gt;</span><br />        <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;MyDB&quot;</span> <span style="color: #ff0000">connectionString</span><span style="color: #0000ff">=&quot;...&quot;</span> <span style="color: #0000ff">/&gt;</span><br />    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">connectionStrings</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span><br />        ... authentication &amp; authorization settings ...<br /><br />        <span style="color: #0000ff">&lt;</span><span style="color: #800000">membership</span> <span style="color: #ff0000">defaultProvider</span><span style="color: #0000ff">=&quot;ConfiguredMembershipProvider&quot;</span><span style="color: #0000ff">&gt;</span><br />            <span style="color: #0000ff">&lt;</span><span style="color: #800000">providers</span><span style="color: #0000ff">&gt;</span><br />                <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;ConfiguredMembershipProvider&quot;</span><br />                     <span style="color: #ff0000">type</span><span style="color: #0000ff">=&quot;System.Web.Security.SqlMembershipProvider&quot;</span><br />                     <span style="color: #ff0000">connectionStringName</span><span style="color: #0000ff">=&quot;MyDB&quot;</span><br />                     <span style="color: #ff0000">applicationName</span><span style="color: #0000ff">=&quot;SampleWebSite&quot;</span><br />                     <span style="color: #ff0000">minRequiredPasswordLength</span><span style="color: #0000ff">=&quot;5&quot;</span><br />                     <span style="color: #ff0000">minRequiredNonalphanumericCharacters</span><span style="color: #0000ff">=&quot;0&quot;</span> <span style="color: #0000ff">/&gt;</span><br />            <span style="color: #0000ff">&lt;/</span><span style="color: #800000">providers</span><span style="color: #0000ff">&gt;</span><br />        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">membership</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span><br /><span style="color: #0000ff">&lt;/</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre></div><p><strong><u>WARNING</u>: </strong>According to Microsoft, you should <strong><u>never</u></strong> use the default provider settings and should <strong><u>always</u></strong> add a new, configured provider; in addition you <strong><u>must</u></strong> be sure to specify the <span style="font-family: courier new">applicationName</span> attribute! See <a title="Always set the " href="http://weblogs.asp.net/scottgu/archive/2006/04/22/Always-set-the-_2200_applicationName_2200_-property-when-configuring-ASP.NET-2.0-Membership-and-other-Providers.aspx" other="other" and="and" configuring="configuring" when="when" property="property" membership="membership" net="ASP.NET" 0="2.0">Scott Guthrie's blog post on this topic</a> for more details. Apparently, you can also use a value of <span style="font-family: courier new">&quot;/&quot;</span> for the <span style="font-family: courier new">applicationName</span> and it will use the root application name.</p><p>The last two attributes of the <span style="font-family: courier new">add</span> node are only a couple of several membership features you can configure. For a complete list of attributes you can configure, see <a href="http://msdn.microsoft.com/en-us/library/whae3t94.aspx">&lt;add&gt; Element for Providers for Membership</a>.</p><h3>Securing Site Content by Requiring Authentication</h3><p>With 5 more lines of configuration added to your <span style="font-family: courier new">Web.config</span>, you can have the whole site secured and accessible only by user account authentication. Even better, you can make that 6 lines added to the <span style="font-family: courier new">Web.config</span>, add a <span style="font-family: courier new">Login.aspx</span> page, and drop in a <span style="font-family: courier new">Login</span> control from the Toolbox and you will get auto-redirect to the login page if someone tries to hit any page you've now secured. The framework is even smart enough to return you to that desired page after successful login; it accomplishes this by redirecting you to the login page but by adding a <span style="font-family: courier new">ReturnUrl</span> query string attribute to know where to go after authentication.</p><p>Here are the additional lines for your <span style="font-family: courier new">Web.config</span> (put them under the <span style="font-family: courier new">system.web</span> node):</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">deny</span> <span style="color: #ff0000">users</span><span style="color: #0000ff">=&quot;?&quot;</span> <span style="color: #0000ff">/&gt;</span><br /><span style="color: #0000ff">&lt;/</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span><br /><br /><span style="color: #0000ff">&lt;</span><span style="color: #800000">authentication</span> <span style="color: #ff0000">mode</span><span style="color: #0000ff">=&quot;Forms&quot;</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">forms</span> <span style="color: #ff0000">defaultUrl</span><span style="color: #0000ff">=&quot;index.html&quot;</span> <span style="color: #ff0000">loginUrl</span><span style="color: #0000ff">=&quot;Login.aspx&quot;</span> <span style="color: #0000ff">/&gt;</span><br /><span style="color: #0000ff">&lt;/</span><span style="color: #800000">authentication</span><span style="color: #0000ff">&gt;</span></pre></div><p><u><strong>NOTE</strong></u>: You will likely already have an <span style="font-family: courier new">authentication</span> node in your <span style="font-family: courier new">Web.config</span>, but it's <span style="font-family: courier new">mode</span> may be set to the default <span style="font-family: courier new">&quot;Windows&quot;</span> value. To use the Membership Provider for authentication, you must have this value set to <span style="font-family: courier new">&quot;Forms.&quot;</span></p><p>The optional 6th line I spoke of earlier is the <span style="font-family: courier new">forms</span> node under the <span style="font-family: courier new">authentication</span> node. The <span style="font-family: courier new">defaultUrl</span> attribute of this line is used to tell the framework where to go after successful login if there is no <span style="font-family: courier new">ReturnUrl</span> specified in the query string. The <span style="font-family: courier new">loginUrl</span> attribute is used to specify the page the user is redirected to if they are attempting to hit a page that requires authentication.</p><p>The <span style="font-family: courier new">deny</span> node is using the question mark (<span style="font-family: courier new">?</span>) wildcard character, which is used for anonymous users (or those that haven't been authenticated yet); the asterisk (<span style="font-family: courier new">*</span>) wildcard is used to signify all users browsing the site. Since we are dealing with the <span style="font-family: courier new">Web.config</span> at the root of the site, this <span style="font-family: courier new">deny</span> rule will apply to the whole site and it's subdirectories. You can either put a <span style="font-family: courier new">Web.config</span> in each subfolder that requires an overriding or more restrictive set of <span style="font-family: courier new">allow</span> and <span style="font-family: courier new">deny</span> rules, or you can actually specify <span style="font-family: courier new">location</span> elements in your <span style="font-family: courier new">Web.config</span>, as is shown in the following example (basically you could have several of these <span style="font-family: courier new">location</span> elements, each with their own <span style="font-family: courier new">authorization</span> rules):</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">location</span> <span style="color: #ff0000">path</span><span style="color: #0000ff">=&quot;Login.aspx&quot;</span><span style="color: #0000ff">&gt;</span><br />        <span style="color: #0000ff">&lt;</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span><br />            <span style="color: #0000ff">&lt;</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span><br />                <span style="color: #0000ff">&lt;</span><span style="color: #800000">allow</span> <span style="color: #ff0000">users</span><span style="color: #0000ff">=&quot;?&quot;</span> <span style="color: #0000ff">/&gt;</span><br />            <span style="color: #0000ff">&lt;/</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span><br />        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">location</span><span style="color: #0000ff">&gt;</span><br /><span style="color: #0000ff">&lt;/</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre></div><p>As far as I can tell, this sample configuration above isn't necessary if you have specified your login page in the <span style="font-family: courier new">loginUrl</span> attribute of the <span style="font-family: courier new">authentication/forms</span> node like we did in the previous code snippet. But this sample is at least illustrative of the location-based authorization rules.</p><p>Personally, I decided to create a folder named<span style="font-family: courier new"> Public</span> in my site and I give it its own <span style="font-family: courier new">Web.config</span> that allows all users (including anonymous ones) access to the containing web pages. This folder currently contains the login, user account registration, account activation (a link included in the email sent upon registration), and password retrieval pages, all of which would need unrestricted access for anonymous users.</p><h3>Test Your Membership Provider</h3><p>With all of this now in place, you should be able to use the <span style="font-family: courier new">ASP.NET Website Administration Tool</span> launched from Visual Studio to create a few new user accounts. I mentioned how to launch this utility earlier in this series with a post titled <a href="http://murrayon.net/2009/01/aspnet-providers-getting-started.html">ASP.NET Providers - Getting Started</a>. Then you can double-check your membership system is working by logging in with your newly created credentials. Also, you can now create a user account registration page (utilizing the <span style="font-family: courier new">CreateUserWizard</span> control) and a password retrieval/reset page (using the <span style="font-family: courier new">PasswordRecovery</span> control). All of the controls I have named throughout this post are highly skinable and configurable via numerous attributes and templates; they also contain flexible task workflows that you can override or plug into by registering to any of several event listeners.</p><p>One other thing that needs to be done if you want to enable the email notification capabilities is to set the SMTP settings in your <font face="Courier New">Web.config</font>.&#160; Here is a snippet you would put right above the <font face="Courier New">system.web</font> node:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">system.net</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">mailSettings</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">smtp</span> <span style="color: #ff0000">from</span><span style="color: #0000ff">=&quot;service@website.com&quot;</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">network</span> <span style="color: #ff0000">host</span><span style="color: #0000ff">=&quot;mail.domain.com&quot;</span> <span style="color: #ff0000">port</span><span style="color: #0000ff">=&quot;25&quot;</span>
                     <span style="color: #ff0000">userName</span><span style="color: #0000ff">=&quot;...&quot;</span> <span style="color: #ff0000">password</span><span style="color: #0000ff">=&quot;...&quot;</span> <span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">smtp</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">mailSettings</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">system.net</span><span style="color: #0000ff">&gt;</span></pre></div><h3>Membership API and MembershipInfo Class</h3><p>There is also a <span style="font-family: courier new">Membership</span> API and an accompanying <span style="font-family: courier new">MembershipInfo</span> class that you can call in order to retrieve and update user info from the database if you wanted to create your own custom controls or page logic. For instance, the following is code that I adapted <a title="Examining ASP.NET 2.0&#39;s Membership, Roles, and Profile - Part 11" href="http://aspnet.4guysfromrolla.com/articles/062508-1.aspx">from Part 11 of the tutorial I mentioned earlier</a> in the introductory post of this series; this code activates an account when a user clicks the link emailed to them during registration:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 650px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">partial</span> <span style="color: #0000ff">class</span> Verify : System.Web.UI.Page<br />{<br />    <span style="color: #0000ff">protected</span> <span style="color: #0000ff">void</span> Page_Load(<span style="color: #0000ff">object</span> sender, EventArgs e)<br />    {<br />        <span style="color: #008000">//Make sure valid querystring value was passed</span><br />        <span style="color: #0000ff">if</span> (<span style="color: #0000ff">string</span>.IsNullOrEmpty(Request.QueryString[<span style="color: #006080">&quot;ID&quot;</span>]) ||<br />            !Regex.IsMatch(Request.QueryString[<span style="color: #006080">&quot;ID&quot;</span>],<br />                <span style="color: #006080">@&quot;[0-9a-f]{8}\-([0-9a-f]{4}\-){3}[0-9a-f]{12}&quot;</span>))<br />        {<br />            InformationLabel.Text = <span style="color: #006080">&quot;An invalid ID value was passed &quot;</span> +<br />                <span style="color: #006080">&quot;in through the query string.&quot;</span>;<br />        }<br />        <span style="color: #0000ff">else</span><br />        {<br />            <span style="color: #008000">//ID exists and is kosher, approve user</span><br />            <span style="color: #008000">//Get the ID sent in on query string</span><br />            Guid userId = <span style="color: #0000ff">new</span> Guid(Request.QueryString[<span style="color: #006080">&quot;ID&quot;</span>]);<br /><br />            <span style="color: #008000">//Get user object</span><br />            MembershipUser userInfo = Membership.GetUser(userId);<br /><br />            <span style="color: #0000ff">if</span> (userInfo == <span style="color: #0000ff">null</span>)<br />            {<br />                <span style="color: #008000">//Could not find user!</span><br />                InformationLabel.Text = <span style="color: #006080">&quot;The user account could not &quot;</span> +<br />                    <span style="color: #006080">&quot;be found in the membership database.&quot;</span>;<br />            }<br />            <span style="color: #0000ff">else</span><br />            {<br />                <span style="color: #008000">//User is valid, approve them</span><br />                userInfo.IsApproved = <span style="color: #0000ff">true</span>;<br />                Membership.UpdateUser(userInfo);<br /><br />                <span style="color: #008000">//Display a message</span><br />                InformationLabel.Text = <span style="color: #006080">&quot;Your account has been &quot;</span> +<br />                    <span style="color: #006080">&quot;verified and you can now log into the site.&quot;</span>;<br />            }<br />        }<br />    }<br />}</pre></div><h3>Read On!</h3><p>Continue onward by reading the next blog post in this series found at the following link:</p><ul><li><a href="http://murrayon.net/2009/02/aspnet-providers-role-management.html">ASP.NET Providers - Role Management</a></li></ul>
</span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Providers - Getting Started]]></title>
    <link href="http://mkmurray.com/blog/2009/01/30/asp-net-providers-getting-started/"/>
    <updated>2009-01-30T14:20:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/01/30/asp-net-providers-getting-started</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This blog post is part of a series about the ASP.NET Providers (namely Membership, Role Management, and Profile).&#160; The introductory post in the series can be found at the following link, which introduces the <a href="http://en.wikipedia.org/wiki/Provider_model" target="_blank">Provider Model pattern</a> and gives a personal example of an implementation I have been working on:</p>  <ul>   <li><a href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">ASP.NET Providers - Membership, Role, and Profile</a> </li> </ul>  <p>This post will deal with getting started using the ASP.NET Providers by setting up a database.</p> <span class='fullpost'> <h3>Database Setup</h3>  <p>First, you will need to configure a database to securely store all of the site's user data and activity info.&#160; You'll most likely be content with the already provided SQL Providers (such as the <font face="Courier New">SqlMembershipProvider</font><font face="Verdan">), but Microsoft also provides you with other options in many cases.&#160; For example in the case of Membership, </font>you also have the option of having your site use the <font face="Courier New">ActiveDirectoryMembershipProvider</font> or you can even roll your own <font face="Courier New">MembershipProvider</font>.&#160; The nice thing about using any of these Microsoft Providers is that they are already set up to store sensitive data like passwords in an encrypted format in the database.</p>  <p>There are two tools you can use to automatically generate the necessary database tables needed for the SQL implementation.&#160; The first tool is a web-based configuration tool launched from Visual Studio called the <font face="Courier New">ASP.NET Website Administration Tool</font>. It can not only create the database tables, but can also configure authorization rules, user roles, user accounts, and many other settings that go right into your <font face="Courier New">Web.config</font>.&#160; It is launched by selecting the <font face="Courier New">ASP.NET Configuration</font> menu option in the <font face="Courier New">Project</font> menu (or <font face="Courier New">Website</font> menu, depending on which version of Visual Studio you have or the project template you selected).&#160; However, this tool will create the database in a SQL Server file named <font face="Courier New">ASPNETDB.mdf</font> placed in the site's <font face="Courier New">App_Data</font> folder.&#160; If you would prefer to create the database schema in an already existing install of SQL Server (likely on a different box), you need to use the <font face="Courier New">aspnet_regsql.exe</font> command-line tool.&#160; The command-line tool's graphical interface can be launched by typing the name of the executable in a <font face="Courier New">Visual Studio Command Prompt</font> (located in the Start Menu under <font face="Courier new">Visual Studio | Visual Studio Tools</font>).</p>  <p>The only other thing you need now is the connection string to this newly populated database.&#160; I will show you where in your <font face="Courier New">Web.config</font> to put the connection string in the next post of this series.</p>  <h3>Read On!</h3>  <p>Continue onward by reading the next blog post in this series found at the following link:</p>  <ul>   <li><a href="http://murrayon.net/2009/01/aspnet-providers-membership.html">ASP.NET Providers - Membership</a> </li> </ul> </span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Alan Blake</div>
<div class='content'>
I needed to use the built-in authentication handling for only a single page and a single user (very simple).  Therefore, I used the "location"<br />tag and the "credentials" tag to then add a user to my web.config you should consider adding this approach as well.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Providers - Membership, Role, and Profile]]></title>
    <link href="http://mkmurray.com/blog/2009/01/30/asp-net-providers-membership-role-and-profile/"/>
    <updated>2009-01-30T14:18:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/01/30/asp-net-providers-membership-role-and-profile</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Seems like any website you start nowadays involves creating the same common features we see all over the web.&#160; These include creating user account functionality, storing profile information, implementing role-based access to content and features, instantiating SQL tables and data access repositories, and so on, so forth.&#160; In most cases it would be a complete waste of time and money to roll your own implementation every time.</p>  <p>There are plenty of frameworks out there that tackle this problem for you and abstract out details you shouldn't have to worry about.&#160; If you are in the .NET world, there are a set of these services available to you that are baked right into the .NET 2.0 Framework.&#160; I'm going to show you a personal example of how easy it is to add some of this functionality to an existing site, even one with an antique and cumbersome architecture.&#160; Implementing these features using the ASP.NET 2.0 Provider Model on said architecture has convinced me that it couldn't be easier to add such functionality to a website, no matter what beast of a site you are dealing with.</p> <span class='fullpost'> <h3>ASP.NET 2.0 Provider Model</h3> <p>With the advent of ASP.NET 2.0, Microsoft introduced a set of configuration-driven services that adhere to the <a href="http://en.wikipedia.org/wiki/Provider_model">Provider Model pattern</a>.&#160; These services focus on storing application state of a website using a very flexible and extensible data access strategy.&#160; The available features that can be added to your website include Membership (which includes authentication and authorization), Role Management, Profile, Session State, Web Parts Personalization, and Site Map navigation.&#160; The whole idea is to be able to secure and enhance an existing site by dropping in a few lines into the <font face="Courier New">Web.config</font>, using a Microsoft utility to automatically create database tables (most likely your chosen storage medium), and then dropping, configuring, and skinning a few controls into your existing pages.&#160; To read a more thorough introduction to the Provider Model and these ASP.NET 2.0 Provider services (including a few helpful diagrams), check out the following link:</p>  <ul>   <li><a href="http://msdn.microsoft.com/en-us/library/aa479030.aspx">ASP.NET 2.0 Provider Model: Introduction to the Provider Model</a> </li> </ul>  <h3>Personal Example</h3>  <p>We currently maintain a series of desktop products that we have been entrusted with.&#160; Under the covers, these &quot;desktop&quot; products were originally written in Java as locally-hosted websites using Apache's web server.&#160; In order to be compatible with Windows Vista, we have since ported these products to .NET 2.0 and currently use <a href="http://www.ultidev.com/products/Cassini/index.htm">UltiDev's free, light-weight, and redistributable web server named Cassini</a> (essentially the same thing as the development web server found in Visual Studio and a great alternative to <a title="Internet Information Services" href="http://en.wikipedia.org/wiki/Internet_Information_Services">IIS</a>).&#160; Many of the features are implemented in JavaScript and the content is almost entirely static HTML pages.&#160; There were only a few Java Servlets that we ported to .NET HTTP Handlers and any database storage has been done using Microsoft Access databases.&#160; This set of products also has other interaction requirements like the ability to view content from another product while staying in the context of the currently open product.&#160; Finally, the installers for a few of these desktop products are getting to be nearly 600 MB in size, which has perpetuated the need for distributing the products to the users offline.</p>  <p>We are in the process right now of exploring the cost benefits and customer experience improvements in moving this set of offerings to an online suite of websites.&#160; The first step we are taking is to build an online version of one of the products where users can obtain a user account to view the content.&#160; Building new applications is one thing, but upgrading and maintaining existing applications (especially ones you have inherited) is a whole different development experience.&#160; This is where my appreciation for the ease and flexibility of what Microsoft is offering comes into play.</p>  <h3>Read On!</h3>  <p>The rest of the blog posts in this series can be found at the following links:</p>  <ul>   <li><a href="http://murrayon.net/2009/01/aspnet-providers-getting-started.html">ASP.NET Providers - Getting Started</a> </li>    <li><a href="http://murrayon.net/2009/01/aspnet-providers-membership.html">ASP.NET Providers - Membership</a> </li>    <li><a href="http://murrayon.net/2009/02/aspnet-providers-role-management.html">ASP.NET Providers - Role Management</a> </li>    <li><a href="http://murrayon.net/2009/02/aspnet-providers-profile.html">ASP.NET Providers - Profile</a> </li> </ul>  <p>In addition, I came across an issue when using the Profile system with the <font face="Courier New">Web Application</font> project template instead of the <font face="Courier New">Web Site</font> project template as found in Visual Studio's default set of project templates.&#160; It has to do with the <font face="Courier New">Profile</font> proxy class object not being auto-generated by Visual Studio when using the <font face="Courier New">Web Application</font> project template.&#160; Read the following blog post for a discussion of the problem and it's solution:</p>  <ul>   <li><a href="http://murrayon.net/2009/02/aspnet-profile-and-web-application.html">ASP.NET Profile and Web Application Projects</a> </li> </ul>  <p>Also, I have another post discussing the advantages of using the ASP.NET Provider system under IIS 7 found in Windows Vista and Server 2008; it will also include some issues with using this system if some of your content is static HTML instead of ASPX pages.&#160; You can find all of this goodness by following the link below:</p>  <ul>   <li><a href="http://murrayon.net/2009/02/iis-7-and-aspnet-providers-membership.html">IIS 7 and ASP.NET Providers (Membership, Roles, and Profile)</a> </li> </ul>  <p>Finally, I based my implementation on a 13-part tutorial series by <a href="http://www.4guysfromrolla.com/ScottMitchell.shtml">Scott Mitchell</a> on <a href="http://www.4guysfromrolla.com/">4GuysFromRolla.com</a>, starting at this link:</p>  <ul>   <li><a href="http://aspnet.4guysfromrolla.com/articles/120705-1.aspx">Examining ASP.NET 2.0's Membership, Roles, and Profile - Part 1</a> </li> </ul>  <p>Enjoy!</p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Security Tutorials]]></title>
    <link href="http://mkmurray.com/blog/2008/02/28/asp-net-security-tutorials/"/>
    <updated>2008-02-28T15:59:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/02/28/asp-net-security-tutorials</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Scott Mitchell, from <a href="http://www.4guysfromrolla.com/">4GuysFromRolla.com</a>, is writing a terrific tutorial series on ASP.NET Forms Authentication, Authorization, User Accounts, and Roles.&#160; This is a great series of articles on the use of ASP.NET's built-in libraries to authenticate and identify visitors, lock down parts of your site through authorization, and manage users and roles.&#160; When it's all finished, it is supposed to be a 14-part series or something like that.&#160; Here is the link:</p>  <p><a title="http://asp.net/learn/security/?lang=cs" href="http://asp.net/learn/security/?lang=cs">http://asp.net/learn/security/?lang=cs</a></p>  </div>

]]></content>
  </entry>
  
</feed>
