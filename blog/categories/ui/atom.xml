<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UI | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/ui/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BeginInvoke Methods and OneWay Attribute]]></title>
    <link href="http://mkmurray.com/blog/2009/05/21/begininvoke-methods-and-oneway-attribute/"/>
    <updated>2009-05-21T16:29:00-06:00</updated>
    <id>http://mkmurray.com/blog/2009/05/21/begininvoke-methods-and-oneway-attribute</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In a previous post I talked about <a href="http://murrayon.net/2008/01/windows-forms-ui-threading.html">Windows Forms UI Threading</a> using delegates.&#160; Recently I needed to replicate what I had learned, and I happened to do so without reviewing my notes in the former blog post.&#160; Apparently I didn’t remember everything I had learned and became confused over thread invocation techniques, introducing a bug into my thread messaging.&#160; The UI thread was blocking while the background worker thread was processing.</p>  <p>The cause was related to figuring out which <font face="Courier New">BeginInvoke</font> method to call when kicking off the worker thread, the <font face="Courier New">BeginInvoke</font> of the <font face="Courier New">Form</font> object or the <font face="Courier New">BeginInvoke</font> of the delegate.&#160; The answer is the <font face="Courier New">BeginInvoke</font> method of the delegate.&#160; All of the examples linked to in the previous post had it right, but I got it mixed up with making <font face="Courier New">Invoke</font> or <font face="Courier New">BeginInvoke</font> calls from the background thread using the <font face="Courier New">Form</font> object’s version of these methods.&#160; If you don’t care whether your messaging from the background thread is synchronous or asynchronous, then you can use either methods and you can use the ones from the <font face="Courier New">Form</font> object.</p>  <p>The problem is using these <font face="Courier New">Form</font> object methods in order to kick off your background worker thread.&#160; The description of the <font face="Courier New">BeginInvoke</font> method on the <font face="Courier New">Form</font> object states that it <font face="Courier New">“executes the specified delegate asynchronously on the thread that the control’s underlying handle was created on.”</font>&#160; I translate this to mean that calling your <font face="Courier New">Form</font> object’s <font face="Courier New">BeginInvoke</font> will process on your UI thread.&#160; Apparently the delegate <font face="Courier New">BeginInvoke</font> method has no such wording in its description.</p> <span class='fullpost'> <p>Rereading <a title="Safe, Simple Multithreading in Windows Forms, Part 1" href="http://msdn.microsoft.com/en-us/library/ms951089.aspx">this MSDN article</a> from the former post and reading the <font face="Courier New">Form</font> object’s <font face="Courier New">BeginInvoke</font> method description which I quoted above set me straight and got rid of my blocking UI problem (again).</p>  <p>During this research session, I came across another informative resource when trying to figure out what was meant by potential resource leaks when using <font face="Courier New">BeginInvoke</font> with out later calling <font face="Courier New">EndInvoke</font>.&#160; From reading the article, I gather you can substitute the <font face="Courier New">EndInvoke</font> call with the <a title="OneWayAttribute Class" href="http://msdn.microsoft.com/en-us/library/system.runtime.remoting.messaging.onewayattribute.aspx"><font face="Courier New">OneWay</font> attribute</a><font face="Courier New"><font color="#333333"><font face="Verdana"></font></font></font> on the method being invoked, as long as it has a <font face="Courier New">void</font> return signature and no <font face="Courier New">ref</font> nor <font face="Courier New">out</font> parameters.&#160; Please let me know if my interpretation is wrong.&#160; I added the attribute to my code in the applicable spots and have seen no side effects of doing so.&#160; Here is the article on read mentioning this attribute:</p>  <p><a href="http://weblogs.asp.net/rosherove/pages/DefensiveEventPublishing.aspx">Defensive Event Publishing in .NET – Part I</a></p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C# Partial Classes Can Enhance Code Organization]]></title>
    <link href="http://mkmurray.com/blog/2008/10/24/c-partial-classes-can-enhance-code-organization/"/>
    <updated>2008-10-24T14:23:00-06:00</updated>
    <id>http://mkmurray.com/blog/2008/10/24/c-partial-classes-can-enhance-code-organization</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Many .NET developers are aware of the idea of partial Classes, as they have existed since .NET 2.0.&#160; The primary purpose is to allow you the developer to share claim on a C# Class with Visual Studio's automated code generators (mainly used by the many designers included in Visual Studio), without the automated code generator stomping all over your code additions every time it runs.&#160; For instance, in a Windows Forms application, you get a code-behind Class where you can put your logic, properties, methods, and event handlers; it is a partial Class of the one Visual Studio's Windows Form designer creates and manages for all the UI objects you dragged around in the designer.&#160; A good summarization of this feature is given by <a title="Bart De Smet&#39;s Blog" href="http://community.bartdesmet.net/blogs/bart/default.aspx">Bart De Smet</a>:</p>  <blockquote>   <p>&quot;In short, partial classes allow you to split the definition of a class across multiple files, or alternatively you could think about it as a code compilation unit separated over multiple files.&quot;</p> </blockquote>  <p>As another practical application of this feature, I have occasionally implemented a practice using partial Classes that I learned from a previous coworker.&#160; Occasionally you find yourself with a Class that is inescapably large.&#160; Perhaps it is a web service that has been in use for a while by customers or other groups within your company, and you can't just deprecate the service very easily; so you just keep extending it and adding more web methods to it for additional, similar functionality.&#160; Another potential situation could be that you began designing a simple application all in one file but it grew to be a little bigger than expected, but it doesn't quite merit a whole major redesign into appropriate classes.&#160; I know how this all sounds, but these scenarios aren't exactly uncommon in real-world practice, where there are other factors in consideration.&#160; I suppose many would resort to <a href="http://msdn.microsoft.com/en-us/library/9a1ybwek.aspx">C# <font face="Courier New">regions</font></a>, but I'm not a fan of them as it really only gives the illusion that your code file is better grouped and somehow shorter.</p> <span class='fullpost'> <p>So if you need some decent semblance of organization in a messy class file with little effort, the partial Class feature can come to your rescue.&#160; You can basically create a partial Class file for each grouping of code that you would probably be putting in a C# <font face="Courier New">region</font>.&#160; For instance, a relatively small Windows Form application could be broken up into the following sub-files (all partial Classes of the same <font face="Courier New">MainForm</font> class):</p>  <ul>   <li><strong>MainForm.cs</strong> = contains the constructor and a few rare global enumerations, properties, or sub-classes </li>    <li><strong>MainForm.UI.cs</strong> = contains the event handlers and other supporting methods that interact directly with the UI </li>    <li><strong>MainForm.Processing.cs</strong> = contains the application logic designed to be spun off in a separate worker thread in order to keep the UI thread from blocking while waiting </li>    <li><strong>MainForm.Designer.cs</strong> = the auto-generated UI file from the Windows Form designer </li> </ul>  <p>Obviously you should try to architect your code better from the get-go, but perhaps what you are looking at is legacy code you have inherited from previous developers and the deadline is fast approaching.&#160; There are reasonable circumstances I can think of (and have encountered) where this quick &amp; dirty organization lets you keep an ounce of sanity, so that you can keep moving forward.</p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catastrophic Failure]]></title>
    <link href="http://mkmurray.com/blog/2008/03/07/catastrophic-failure/"/>
    <updated>2008-03-07T10:04:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/03/07/catastrophic-failure</id>
    <content type="html"><![CDATA[<div class='post'>
<p>So I got a &quot;<font face="Courier New">Catastrophic Failure</font>&quot; in the Silverlight 2 beta 1 designer in VS 2008 this morning.&#160; Have no clue what it means, but it seemed temporary (I was in the middle of typing in the XAML view and the designer didn't like something I did).&#160; Here is a screenshot, it's pretty amusing:</p> <span class='fullpost'> <p><a href="http://lh4.ggpht.com/charliebrown928/SFqfdiP7PEI/AAAAAAAAABU/vG6KlZ5yB0c/s1600-h/screenshot7.jpg"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="407" alt="screenshot" src="http://lh3.ggpht.com/charliebrown928/SFqfeTgD8eI/AAAAAAAAABc/CZxSdmcnaCY/screenshot_thumb5.jpg?imgmax=800" width="784" border="0" /></a></p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silverlight Tips, Tricks and Best Practices]]></title>
    <link href="http://mkmurray.com/blog/2008/02/28/silverlight-tips-tricks-and-best-practices/"/>
    <updated>2008-02-28T16:02:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/02/28/silverlight-tips-tricks-and-best-practices</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Here is a great MSDN article on some Silverlight tips, tricks, and best practices:&#160; <a title="http://msdn.microsoft.com/msdnmag/issues/08/LA/WickedCode/default.aspx" href="http://msdn.microsoft.com/msdnmag/issues/08/LA/WickedCode/default.aspx">http://msdn.microsoft.com/msdnmag/issues/08/LA/WickedCode/default.aspx</a></p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Pending Microsoft Technologies]]></title>
    <link href="http://mkmurray.com/blog/2008/01/24/some-pending-microsoft-technologies/"/>
    <updated>2008-01-24T15:50:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/01/24/some-pending-microsoft-technologies</id>
    <content type="html"><![CDATA[<div class='post'>
<p>A cool new technology Microsoft is working on in its Live Labs is called Volta.&#160; It is a way to develop web applications all in one tier, and then late in the development process decide which parts of the code should be client-side and which parts should be server side.&#160; The idea is that you can easily move code fragments back and forth between client-side and server-side at will.&#160; You write your web application in any language of your choice that compiles to .NET and Volta will turn it completely and solely into HTML and JavaScript, meaning your resulting site will be compatible with any browser.&#160; And your site can have all of this with an AJAX look-and-feel.&#160; Check it out here:&#160; <a title="http://labs.live.com/volta/" href="http://labs.live.com/volta/">http://labs.live.com/volta/</a></p>  <p>A different Microsoft team is working on a download called ASP.NET 3.5 Extensions (<a title="http://www.asp.net/downloads/3.5-extensions/" href="http://www.asp.net/downloads/3.5-extensions/">http://www.asp.net/downloads/3.5-extensions/</a>).&#160; It is in &quot;public preview&quot; right now.&#160; It contains some new additions to ASP.NET AJAX, some new Silverlight controls, and a few other cool additions.&#160; Most interesting to me is an MVC Framework&#160; (Model-View-Controller).&#160; One of the managers has a blog that I frequent, and he has written a 5-part series of blogs about this new framework.&#160; This link will send you directly to Part 1 (skipping Part 0):&#160; <a title="http://weblogs.asp.net/scottgu/archive/2007/11/13/asp-net-mvc-framework-part-1.aspx" href="http://weblogs.asp.net/scottgu/archive/2007/11/13/asp-net-mvc-framework-part-1.aspx">http://weblogs.asp.net/scottgu/archive/2007/11/13/asp-net-mvc-framework-part-1.aspx</a></p>  <p>Also, it appears Microsoft recently released a training kit for Visual Studio 2008 and .NET Framework 3.5 available for download now at the following location:&#160; <a title="http://www.microsoft.com/downloads/details.aspx?FamilyID=8bdaa836-0bba-4393-94db-6c3c4a0c98a1&amp;DisplayLang=en" href="http://www.microsoft.com/downloads/details.aspx?FamilyID=8bdaa836-0bba-4393-94db-6c3c4a0c98a1&amp;DisplayLang=en">http://www.microsoft.com/downloads/details.aspx?FamilyID=8bdaa836-0bba-4393-94db-6c3c4a0c98a1&amp;DisplayLang=en</a></p>  <p>Enjoy.</p>  </div>

]]></content>
  </entry>
  
</feed>
