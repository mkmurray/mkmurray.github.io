<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SQL | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using SQL PIVOT and UNPIVOT]]></title>
    <link href="http://mkmurray.com/blog/2012/11/03/using-sql-pivot-and-unpivot/"/>
    <updated>2012-11-03T23:22:00-06:00</updated>
    <id>http://mkmurray.com/blog/2012/11/03/using-sql-pivot-and-unpivot</id>
    <content type="html"><![CDATA[<p>I learned about a pair of SQL keywords I didn't know existed before. I suppose I shouldn't have been so surprised
this ability existed in SQL since I knew it existed within Excel spreadsheets, but it really saved the day this
last week. I'm speaking of the <code>PIVOT</code> and <code>UNPIVOT</code> SQL keywords.</p>

<p>This last week I needed to track down some data inconsistencies in our database by joining a few view model tables.
These tables are populated by event handlers that denormalize the relevant data from events into a view model
table that serves the needs of a specific part of the UI. In one particular view model table, it made sense to
arrange the data points specific to each US state as columns on a single row. This allowed for a grid-based UI that
enables batch operations on many rows at one time. A second view model table was intended for a different use case
and was designed so that the state-specific data points became a one-to-many relationship across multiple rows and
only two columns for the key-value pair of the US state and its associated data point value. These were two of the
tables I needed to join together during my database inquisition.</p>

<p>At this point I figured I was stuck, as I couldn't see a sensible way to join two tables designed so contrary to
each other for the purposes of joining. I tried to think of any ways to dynamically join tables on a column name
in one table specified by the value in the other table's row. I knew I was heading nowhere fast, so I asked our
DBA for some ideas. He informed me of the <code>PIVOT</code> and <code>UNPIVOT</code> keywords in SQL as one option to solve the problem.
We reasoned that even though it may not be the most efficient feature, the likelihood of it proving to be a
performance bottleneck would be essentially non-existent (given that the entire size of the data set was relatively
small, on the magnitude of hundreds or thousands of rows instead of millions of rows). And so I gave it a go.</p>

<p>I will now describe an example scenario in order to illustrate how I used the <code>UNPIVOT</code> feature to join two tables
that didn't seem at all compatible. The goal will be to join a table representing what US states each product is
available for sale within to a table representing how many of each product are being sold in each state. We will
call the first table <code>ProductAvailability</code> and give it an integer identity column named <code>Id</code>, an integer column
named <code>ProductId</code>, and then 52 <code>bit</code> columns indicating the availability status of the product in each of the 50 US
states, the District of Columbia, and Puerto Rico. These columns will be named by their two letter abbreviations of
<code>AK</code> through <code>WY</code>. The second table we will call <code>ProductSales</code> and it will also have an integer identity column
named <code>Id</code> and an integer column named <code>ProductId</code>. In addition it will have a string column (specifically
<code>char(2)</code>) named <code>StateCode</code> and an integer column named <code>TotalSales</code>.</p>

<p>The unpivoting of the <code>ProductAvailability</code> table to prepare it for joining can be done like so:</p>

<pre class="brush: sql">
    SELECT
      Unpivoted.ProductId,
      Unpivoted.StateCode,
      Unpivoted.IsAvailable
    FROM ProductAvailability
    UNPIVOT
    (
      IsAvailable FOR StateCode
      IN (AK,AL,AR,AZ,CA,CO,CT,
          DC,DE,FL,GA,HI,IA,ID,
          IL,IN,KS,KY,LA,MA,MD,
          ME,MI,MN,MO,MS,MT,NC,
          ND,NE,NH,NJ,NM,NV,NY,
          OH,OK,OR,PA,PR,RI,SC,
          SD,TN,TX,UT,VA,VT,WA,
          WI,WV,WY)
    ) AS Unpivoted
</pre>


<p>The interesting part is obviously the <code>UNPIVOT</code> clause. Here we are declaring a list of column names to unpivot and
also naming two new columns in which to place the old column's name and value (<code>StateCode</code> and <code>IsAvailable</code>
respectively). The result is that instead of having one row of 54 columns for each product, we now have 52 rows of
three columns to describe the exact same availability of the product. But with this second schema, we can more
easily join with the <code>ProductSales</code> table.</p>

<p>Here is an example of such a query where we are trying to find the products which have no sales in a state for
which it is marked as available for sale:</p>

<pre class="brush: sql">
    SELECT
      ProductStateAvailability.ProductId,
      ProductStateAvailability.StateCode
    FROM
    (
      SELECT
        Unpivoted.ProductId,
        Unpivoted.StateCode,
        Unpivoted.IsAvailable
      FROM ProductAvailability
      UNPIVOT
      (
        IsAvailable FOR StateCode
        IN (AK,AL,AR,AZ,CA,CO,CT,
            DC,DE,FL,GA,HI,IA,ID,
            IL,IN,KS,KY,LA,MA,MD,
            ME,MI,MN,MO,MS,MT,NC,
            ND,NE,NH,NJ,NM,NV,NY,
            OH,OK,OR,PA,PR,RI,SC,
            SD,TN,TX,UT,VA,VT,WA,
            WI,WV,WY)
      ) AS Unpivoted
      WHERE Unpivoted.IsAvailable = 1
    ) AS ProductStateAvailability
    INNER JOIN ProductSales
      ON ProductSales.StateCode = ProductStateAvailability.StateCode
      AND ProductSales.ProductId = ProductStateAvailability.ProductId
    WHERE ProductSales.TotalSales = 0
</pre>


<p>I hope you find the <code>PIVOT</code> and <code>UNPIVOT</code> SQL keywords just as helpful as I did if you ever find yourself in a bind
with two tables that are seemingly impossible to join.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LINQ Query Syntax and Type Argument Inference]]></title>
    <link href="http://mkmurray.com/blog/2010/12/03/linq-query-syntax-and-type-argument-inference/"/>
    <updated>2010-12-03T15:29:00-07:00</updated>
    <id>http://mkmurray.com/blog/2010/12/03/linq-query-syntax-and-type-argument-inference</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In LINQ, you can query in-memory data collections using <a href="http://msdn.microsoft.com/en-us/library/bb397947.aspx">Method Syntax (the <font face="Courier New">IEnumerable</font> extension methods) or Query Syntax (the SQL-like, declarative syntactic sugar on top of the underlying method calls)</a>.&#160; I was using the query syntax to join a few in-memory collections and then project (like a SQL <font face="Courier New">SELECT</font>) the denormalized data into a new object that only contained a few pieces of information from each of the separate data collections.&#160; The code could look similar to this (we'll go with a shopping example in honor of the upcoming holiday season):</p>  <pre class="brush: csharp">var shoppingLists =
    from person in people
    join wishlist in wishlists on person.Id equals wishlist.personId
    join store in stores on store.Id equals wishlist.storeId
    select new
    {
        PersonName = person.Name,
        StoreName = store.Name,
        NumItems = wishlist.Items.Count
    };</pre>

<p>However, I ran into the following intellisense red squiggly error in the Visual Studio C# code editor on the second <font face="Courier New">join</font> statement:</p>

<blockquote>
  <p><font face="Courier New">The type arguments for method 'IEnumerable&lt;TResult&gt; System.Linq.Enumerable.Join&lt;TOuter,TInner,TKey,TResult&gt;(this IEnumerable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter,TKey&gt;, Func&lt;TInner,TKey&gt;, Func&lt;TOuter,TInner,TResult&gt;)' cannot be inferred from the query.</font></p>
</blockquote>

<p>The error might also end with a statement that says &quot;<font face="Courier New">Try specifiying the type arguments explicitly</font>.&quot;</p>
<span class="fullpost">
  <h3>Let’s Take a Closer Look…</h3>

  <p>The underlying problem is best understood by examining the method signature of the <a href="http://msdn.microsoft.com/en-us/library/bb534675.aspx">LINQ <font face="Courier New">Join</font> extension method</a> and how the LINQ query syntax for the keyword <font face="Courier New">join</font> maps to that method call in the compiler.&#160; The type signature for the extension method is as follows:</p>

  <pre class="brush: csharp">public static IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt;(
    this IEnumerable&lt;TOuter&gt; outer,
    IEnumerable&lt;TInner&gt; inner,
    Func&lt;TOuter,TKey&gt; outerKeySelector,
    Func&lt;TInner,TKey&gt; innerKeySelector,
    Func&lt;TOuter,TInner,TResult&gt; resultSelector)</pre>

  <p>Consistent with all <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a>, it is <font face="Courier New">public static</font> and has a <font face="Courier New">this</font> keyword in front of the first method parameter, allowing you to call the <font face="Courier New">Join</font> method as if it had been declared in the original definition of the <font face="Courier New">IEnumerable&lt;&gt;</font> class or one of its inheriting children classes.</p>

  <p>The first two parameters are the two data collections being joined, and in the case of my LINQ query above, they would be the joined collection of <font face="Courier New">people</font> &amp; <font face="Courier New">wishlists</font> and then the <font face="Courier New">stores</font> collection, respectively.</p>

  <p>The next two method parameters take delegates or lambda expressions that select the key value from each collection participating in the join, <font face="Courier New">outer</font> collection key selector first and then the <font face="Courier New">inner</font> key selector second.&#160; The key values of each item in each collection will compared to each other for equality.&#160; It will use the normal definition of the <font face="Courier New">Equals</font> method for your object type (or if you specified a custom one in your class definition), or there is another <font face="Courier New">Join</font> extension method signature that takes in another method parameter that an object that conforms to the <font face="Courier New"><a href="http://msdn.microsoft.com/en-us/library/ms132151.aspx">IEqualityComparer&lt;TKey&gt; <font face="Arial">interface</font></a></font>.&#160; The key selectors from our LINQ query sample would be the two member access expressions in the &quot;<font face="Courier New">on store.Id equals wishlist.storeId</font><font face="Arial">&quot; statement.</font></p>

  <p>The last parameter is a delegate or lambda expression that takes in a item from each participating data collection and projects the items into a new form (like the <font face="Courier New">Select</font> LINQ query method and its SQL equivalent).&#160; The two items being passed into the <font face="Courier New">Func</font> have passed the equality comparison of each item’s key value, exactly the same as how rows from two tables match up in an <font face="Courier New">inner join</font> statement in SQL.</p>

  <p>As for the <a href="http://msdn.microsoft.com/en-us/library/0zk36dx2.aspx">generic type parameters</a> in this extension method definition, <font face="Courier New">TOuter</font> and <font face="Courier New">TInner</font> are the types from the two collections participating in the join.&#160; <font face="Courier New">TKey</font> is the type returned by the key selectors; notice that in order to compare the equality of each key selected, they need to be of the same type.&#160; In our example, <font face="Courier New">TKey</font> is likely <font face="Courier New">int</font> or <font face="Courier New">long</font> (or maybe <font face="Courier New">Guid</font>) since we’re dealing with <font face="Courier New">Id</font> properties of all of our objects.&#160; <font face="Courier New">TResult</font> is the type returned by the projection <font face="Courier New">Func&lt;TOuter,TInner,TResult&gt; resultSelector</font>; in our case, we returned an <a href="http://msdn.microsoft.com/en-us/library/bb397696.aspx">anonymous type</a> consisting of three properties (<font face="Courier New">PersonName</font>, <font face="Courier New">StoreName</font>, and <font face="Courier New">NumItems</font>).</p>

  <h3>Ok, So Where Did I Screw Up Then?</h3>

  <p>To answer this, let’s take a look one more time at my LINQ query syntax, how it would map to LINQ method syntax, and the <font face="Courier New">Join</font> method signature again all side-by-side:</p>

  <pre class="brush: csharp; highlight: [4,19,20]">var shoppingLists =
    from person in people
    join wishlist in wishlists on person.Id equals wishlist.personId
    join store in stores on store.Id equals wishlist.storeId
    select new
    {
        PersonName = person.Name,
        StoreName = store.Name,
        NumItems = wishlist.Items.Count
    };

// Equivalent LINQ method syntax
var shoppingLists2 = people
    .Join(wishlists,
        person =&gt; person.Id,
        wishlist =&gt; wishlist.personId,
        (person, wishlist) =&gt; new { person, wishlist })
    .Join(stores,
        store =&gt; store.Id,
        something =&gt; something.wishlist.storeId,
        (obj, store) =&gt; new
        {
            PersonName = obj.person.Name,
            StoreName = store.Name,
            NumItems = obj.wishlist.Items.Count
        });

public static IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt;(
    this IEnumerable&lt;TOuter&gt; outer,
    IEnumerable&lt;TInner&gt; inner,
    Func&lt;TOuter,TKey&gt; outerKeySelector,
    Func&lt;TInner,TKey&gt; innerKeySelector,
    Func&lt;TOuter,TInner,TResult&gt; resultSelector)</pre>

  <p>The issue is lines 19 and 20 above; they need to be switched.&#160; The compiler can’t properly infer the generic type parameters because we have our key selectors out of order in the argument list when invoking the <font face="Courier New">Join</font> method.&#160; If you wanted to be explicit about your generic type parameters assignments, then <font face="Courier New">Join&lt;TOuter, TInner, TKey, TResult&gt;</font> would be <font face="Courier New">Join&lt;Temp1, Store, int, Temp2&gt;</font>, where <font face="Courier New">Temp1</font> and <font face="Courier New">Temp2</font> represent the magical type definitions that the compiler creates underneath the covers when you use anonymous types in your C# code.&#160; Notice the <font face="Courier New">outerKeySelector</font> needs to come before the <font face="Courier New">innerKeySelector</font>.&#160; It appears the &quot;<font face="Courier New">on store.Id equals wishlist.storeId</font><font face="Arial">&quot; syntax is not a </font><a href="http://en.wikipedia.org/wiki/Commutativity">commutative operation</a>.</p>

  <p>One last thing, I just realized that the error(s) given in Visual Studio when you actually compile the code are different than the intellisense red squiggly error message.&#160; It appears an actual build of the code is able to be a little more omniscient than the quick compile that intellisense does as you type.&#160; The error (and intelligent suggestion) the compiler offers says something like this:</p>

  <blockquote>
    <p><font face="Courier New">The name 'store' is not in scope on the left side of 'equals'.&#160; Consider swapping the expressions on either side of 'equals'.</font></p>
  </blockquote>

  <h3>Additional Info</h3>

  <p>While reading the <a href="http://msdn.microsoft.com/en-us/library/bb534675.aspx">MSDN article on the LINQ <font face="Courier New">Join</font> method</a>, I thought the &quot;<font face="Courier New">Remarks</font><font face="Arial">&quot;</font> section has some really great stuff about deferred execution, default equality comparison, differences from <font face="Courier New">SelectMany</font>, sort order perseverance, and so on:</p>

  <blockquote>
    <p>This method is implemented by using deferred execution. The immediate return value is an object that stores all the information that is required to perform the action. The query represented by this method is not executed until the object is enumerated either by calling its <strong>GetEnumerator</strong> method directly or by using foreach in Visual C# or For Each in Visual Basic.</p>

    <p>The default equality comparer, <a href="http://msdn.microsoft.com/en-us/library/ms224763.aspx">Default</a>, is used to hash and compare keys.</p>

    <p>A join refers to the operation of correlating the elements of two sources of information based on a common key. <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx">Join</a> brings the two information sources and the keys by which they are matched together in one method call. This differs from the use of <strong>SelectMany</strong>, which requires more than one method call to perform the same operation.</p>

    <p><a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx">Join</a> preserves the order of the elements of outer, and for each of these elements, the order of the matching elements of inner.</p>

    <p>In query expression syntax, a join (Visual C#) or Join (Visual Basic) clause translates to an invocation of <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx">Join</a>.</p>

    <p>In relational database terms, the <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.join.aspx">Join</a> method implements an inner equijoin. 'Inner' means that only elements that have a match in the other sequence are included in the results. An 'equijoin' is a join in which the keys are compared for equality. A left outer join operation has no dedicated standard query operator, but can be performed by using the <a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.groupjoin.aspx">GroupJoin</a> method. See <a href="http://msdn.microsoft.com/en-us/library/bb397908.aspx">Join Operations</a>.</p>
  </blockquote>

  <p>Thanks, I hope this proves helpful to someone, as it was certainly eye-opening to me.</p>
</span></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Server Express 2005 Remote Connections]]></title>
    <link href="http://mkmurray.com/blog/2009/02/19/sql-server-express-2005-remote-connections/"/>
    <updated>2009-02-19T10:36:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/02/19/sql-server-express-2005-remote-connections</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I developed an ASP.NET site connecting to a local SQL Server Express 2005 instance on my development box.&#160; To further my informal testing, I wanted to host the site under IIS 7 on a Windows Server 2008 box, but I wanted to just use the same database remotely.&#160; I got the following error message when the site tried to hit the database:</p>  <blockquote>   <p>&quot;An error has occurred while establishing a connection to the server.&#160; When connecting to SQL Server 2005, this failure may be caused by the fact that under the default settings SQL Server does not allow remote connections.&#160; (provider: Named Pipes Provider, error: 40 - Could not open connection to SQL Server)&quot;</p> </blockquote>  <p>Apparently SQL Server Express 2005 is not automatically configured for remote access during installation (which really isn't surprising as it is the Express version).&#160; Remote connections can be enabled though with a few relatively painless steps.&#160; See the following link for the procedure:</p>  <ul>   <li><a href="http://www.datamasker.com/SSE2005_NetworkCfg.htm">Configuring SQL Server Express 2005 for Remote Access when SQL Server does not allow remote connections</a></li> </ul>  <p>Hope this is helpful.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Providers - Profile]]></title>
    <link href="http://mkmurray.com/blog/2009/02/09/asp-net-providers-profile/"/>
    <updated>2009-02-09T16:10:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/02/09/asp-net-providers-profile</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This blog post is part of a series about the ASP.NET Providers (namely Membership, Role Management, and Profile). The introductory post in the series can be found at the following link, which introduces the <a href="http://en.wikipedia.org/wiki/Provider_model">Provider Model pattern</a> and gives a personal example of an implementation I have been working on:</p><ul><li><a href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">ASP.NET Providers - Membership, Role, and Profile</a></li></ul><p>This post will deal with adding Profile properties to your user accounts (and apparently this can also be used with anonymous users as well).&#160; However, I will suggest using a slightly different Profile Provider than what comes in ASP.NET by default.&#160; This will show how easy it is to plug in a different implementation in this very flexible Provider Model.</p> <span class='fullpost'> <h3>SqlProfileProvider vs. SqlTableProfileProvider</h3><p>The <font face="Courier New">SqlProfileProvider</font> is the built-in Profile Provider that ASP.NET comes with by default.&#160; It allows you to define custom fields that make up profiling data you would want to collect and store about your users.&#160; This could be demographics, preferences, or any other useful details.&#160; This specific implementation is designed in a way where no matter what fields you define, your database schema will be compatible with any upgrade Microsoft could send down to patch the Provider system or ASP.NET in general.&#160; The way this is accomplished is by storing a <a title="Binary Large Object" href="http://en.wikipedia.org/wiki/Binary_large_object">blob</a> of all the field names in one table column and a blob of all the field values in another column; it's similar to the concept of a <a title="Associative Array" href="http://en.wikipedia.org/wiki/Associative_array">dictionary</a> with key/value pairs.&#160; The difficult part is that these blobs can contain clear-text, XML, and/or binary, depending on how the source data type serializes by default.&#160; Unfortunately, this highly flexible solution is quite unusable if you need a clear view of the Profile data for reporting purposes or stored procedure needs.</p><p>When trying to find an already implemented custom provider that would allow to store each Profile field in its own table column, I came across a <a title="ASP.NET 2.0 SQL Table Profile Provider Released Today" href="http://weblogs.asp.net/scottgu/archive/2006/01/10/435038.aspx">blog post from Scott Guthrie introducing such an implementation done by two Microsoft employees</a>.&#160; The name of this provider is the <font face="Courier New">SqlTableProfileProvider</font>, and it can be found at the following link:</p><p><a href="http://www.asp.net/downloads/sandbox/table-profile-provider-samples/">Table Profile Provider Samples</a></p><p>At the above location, you will find an MSI download that will install a sample project containing a few source code files you can include in your project; you will also find a download link for a &quot;white paper&quot; Word document that explains the usage of the <font face="Courier New">SqlTableProfileProvider</font> and the <font face="Courier New">SqlStoredProcedureProfileProvider</font> custom providers.&#160; The nice thing about both of these providers is that their use in code and their configuration in the Web.config is extremely similar to how the original <font face="Courier New">SqlProfileProvider</font> is used and configured.</p><h3>Setting up the SqlTableProfileProvider</h3><p>As was done with the <a title="ASP.NET Providers - Membership" href="http://murrayon.net/2009/01/aspnet-providers-membership.html">Membership</a> and <a title="ASP.NET Providers - Role Management" href="http://murrayon.net/2009/02/aspnet-providers-role-management.html">Role Management</a> Providers, here is the XML fragment that would go in your <font face="Courier New">Web.config</font>:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 325px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">connectionStrings</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;MyDB&quot;</span> <span style="color: #ff0000">connectionString</span><span style="color: #0000ff">=&quot;...&quot;</span> <span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">connectionStrings</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span>
        ... authentication &amp; authorization settings ...
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">profile</span> <span style="color: #ff0000">enabled</span><span style="color: #0000ff">=&quot;true&quot;</span>
                 <span style="color: #ff0000">defaultProvider</span><span style="color: #0000ff">=&quot;ConfiguredProfileProvider&quot;</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">providers</span><span style="color: #0000ff">&gt;</span>
                <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;ConfiguredProfileProvider&quot;</span>
                     <span style="color: #ff0000">type</span><span style="color: #0000ff">=&quot;Microsoft.Samples.SqlTableProfileProvider&quot;</span>
                     <span style="color: #ff0000">connectionStringName</span><span style="color: #0000ff">=&quot;MyDB&quot;</span>
                     <span style="color: #ff0000">table</span><span style="color: #0000ff">=&quot;custom_Profile&quot;</span>
                     <span style="color: #ff0000">applicationName</span><span style="color: #0000ff">=&quot;SampleWebSite&quot;</span> <span style="color: #0000ff">/&gt;</span>
            <span style="color: #0000ff">&lt;/</span><span style="color: #800000">providers</span><span style="color: #0000ff">&gt;</span>
            ... properties section found in the next XML snippet ...
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">profile</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre></div><p><strong><u>WARNING</u>: </strong>According to Microsoft, you should <strong><u>never</u></strong> use the default provider settings and should <strong><u>always</u></strong> add a new, configured provider; in addition you <strong><u>must</u></strong> be sure to specify the <font face="Courier New">applicationName</font> attribute! See <a href="http://weblogs.asp.net/scottgu/archive/2006/04/22/Always-set-the-_2200_applicationName_2200_-property-when-configuring-ASP.NET-2.0-Membership-and-other-Providers.aspx">Scott Guthrie's blog post on this topic</a> for more details. Apparently, you can also use a value of <font face="Courier New">&quot;/&quot;</font> for the <font face="Courier New">applicationName</font> and it will use the root application name.</p><p>You'll notice in the <font face="Courier New">type</font> attribute that we are not referencing the default <font face="Courier New">SqlProfileProvider</font> that ships with ASP.NET.&#160; What you need to do is get this new class included or referenced in your solution so that this namespace reference can successfully resolve.&#160; I opted to just include the code files in my solution as is; I chose to place them in my <font face="Courier New">App_Code</font> folder.&#160; The code files you want to grab are likely in the default location that the MSI installed to, which is <font face="Courier New">Program Files/Microsoft/ASP.NET 2.0 Table Profile Provider Samples</font>.&#160; The two files you need are <font face="Courier New">SqlStoredProcedureProfileProvider.cs</font> and <font face="Courier New">SqlTableProfileProvider.cs</font><font face="Verdana">, </font>both of which are found in the <font face="Courier New">App_Code</font> folder of the sample project.&#160; You need to copy both code files to your solution, as it appears that the <font face="Courier New">SqlTableProfileProvider</font> depends on some logic in the <font face="Courier New">SqlStoredProcedureProfileProvider</font> for some reason.</p><p>Also note the <font face="Courier New">table</font> attribute above (which is not present in the built-in <font face="Courier New">SqlProfileProvider</font>), which tells the provider which table in your database will be storing the custom Profile fields.&#160; As for the &quot;properties section&quot; referenced near the end of the above snippet, this is where you specify the custom Profile fields and their mappings to column names in the specified database table.&#160; The advantage of specifying this information in the <font face="Courier New">Web.config</font> is that you will be able to get programmatic access to these fields as strongly-typed properties on a proxy class named <font face="Courier New">Profile</font> in your code-behind.&#160; Here is a sample <font face="Courier New">properties</font> configuration:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 300px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">properties</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;FirstName&quot;</span>
         <span style="color: #ff0000">type</span><span style="color: #0000ff">=&quot;string&quot;</span>
         <span style="color: #ff0000">defaultValue</span><span style="color: #0000ff">=&quot;[null]&quot;</span>
         <span style="color: #ff0000">customProviderData</span><span style="color: #0000ff">=&quot;FirstName;nvarchar&quot;</span> <span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;Age&quot;</span>
         <span style="color: #ff0000">type</span><span style="color: #0000ff">=&quot;int&quot;</span>
         <span style="color: #ff0000">customProviderData</span><span style="color: #0000ff">=&quot;Age;int&quot;</span> <span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;AccountExpiration&quot;</span>
         <span style="color: #ff0000">type</span><span style="color: #0000ff">=&quot;DateTime&quot;</span>
         <span style="color: #ff0000">defaultValue</span><span style="color: #0000ff">=&quot;[null]&quot;</span>
         <span style="color: #ff0000">customProviderData</span><span style="color: #0000ff">=&quot;AccountExpiration;datetime&quot;</span> <span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;CookieID&quot;</span>
         <span style="color: #ff0000">type</span><span style="color: #0000ff">=&quot;System.Guid&quot;</span>
         <span style="color: #ff0000">defaultValue</span><span style="color: #0000ff">=&quot;[null]&quot;</span>
         <span style="color: #ff0000">customProviderData</span><span style="color: #0000ff">=&quot;CookieID;uniqueidentifier&quot;</span> <span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">properties</span><span style="color: #0000ff">&gt;</span></pre></div><p>The Profile system provides a configuration point for each Profile field called <font face="Courier New">customProviderData</font>.&#160; It appears the default <font face="Courier New">SqlProfileProvider</font> doesn't even look at this additional attribute, but rather reserves this configuration point for use by custom implemented Profile providers.&#160; The <font face="Courier New">SqlTableProfileProvider </font>utilizes this extra metadata field as a place to put mapping information for a column name and ADO.NET database type.&#160; If you have questions about which ADO.NET and .NET types to use/specify in this configuration, there is helpful information in the accompanying white paper found on the download site.&#160; Also found in that document is a great discussion you may want to read about the <font face="Courier New">defaultValue</font> attribute, what it configures, and how it might differ for value types (such as <font face="Courier New">integer</font>).</p><h3>Creating the Database Table</h3><p>Now that you have the code files in your solution and have configured the Profile fields, you need to create the custom table in the database that this provider will query and update.&#160; Here is a sample SQL definition for our custom profile table:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">create</span> <span style="color: #0000ff">table</span> dbo.custom_Profile
(
    UserId               uniqueidentifier <span style="color: #0000ff">not</span> <span style="color: #0000ff">null</span> <span style="color: #0000ff">Primary</span> <span style="color: #0000ff">Key</span>,
    FirstName            nvarchar(50) <span style="color: #0000ff">null</span>,
    Age                  <span style="color: #0000ff">int</span> <span style="color: #0000ff">null</span>,
    AccountExpiration    datetime <span style="color: #0000ff">null</span>,
    CookieID             uniqueidentifier <span style="color: #0000ff">null</span>,
    LastUpdatedDate      datetime <span style="color: #0000ff">not</span> <span style="color: #0000ff">null</span>
)
go</pre></div><p>Note that the <font face="Courier New">SqlTableProfileProvider</font> requires two extra columns in addition to your custom defined Profile properties, namely <font face="Courier New">UserId</font> and <font face="Courier New">LastUpdatedDate</font>.&#160; One other thing to be aware of is that if you use the Membership API to delete a user programmatically, this will remove all entries related to that user in the database <strong><u>except</u></strong> from your custom Profile table.&#160; I believe this might be because the Profile system can apparently be used independently of the Membership system, even allowing you to store Profile data on anonymous, unauthenticated users.&#160; I think the same caution would go for any utility that presumably uses this Membership API under the covers, such as the <font face="Courier New">ASP.NET Website Administration Tool</font> launched from Visual Studio that I referred to earlier in this series with a post titled <a href="http://murrayon.net/2009/01/aspnet-providers-getting-started.html">ASP.NET Providers - Getting Started</a>.&#160; Up to this point, I have resorted to manually clearing out Profile table rows myself that are linked to the membership account being removed from the database.</p><p>Also, if your web site is using a Windows user or system account for the identity of the worker process, you'll want to make sure that set of credentials has <font face="Courier New">SELECT</font>, <font face="Courier New">INSERT</font>, <font face="Courier New">UPDATE</font>, and <font face="Courier New">DELETE</font> permissions granted to it for this new custom database table you created.&#160; There are also some <font face="Courier New">EXECUTE</font>, <font face="Courier New">SELECT</font>, and <font face="Courier New">UPDATE</font> permissions required on a few of the already-existing stored procedures that the Provider system uses.&#160; Again, check the accompanying white paper on the download site for a discussion about these procedure and for some SQL statements to help you automate the granting of these permissions.</p><h3>The Profile Proxy Class</h3><p>If you are using the <font face="Courier New">Web Site</font> project template in Visual Studio, then you are good to go with using the <font face="Courier New">Profile</font> proxy class that can be used anywhere in your code to retrieve and update Profile fields on the current user.&#160; The availability of this <font face="Courier New">Profile</font> class is independent of whether you are using the built-in ASP.NET <font face="Courier New">SqlProfileProvider</font> or the custom <font face="Courier New">SqlTableProfileProvider</font> that I've been showcasing thus far.&#160; However, if you are using the <font face="Courier New">Web Application</font> project template, this proxy object is not auto-generated for you by Visual Studio.&#160; For a detailed discussion of the problem and a working solution, see my next post which is entitled <a href="http://murrayon.net/2009/02/aspnet-profile-and-web-application.html">ASP.NET Profile and Web Application Projects</a>.</p><p>Use of this <font face="Courier New">Profile</font> class couldn't be easier and is exactly as you would expect it to be.&#160; Here is a code snippet that both retrieves and updates strongly-typed Profile properties (exactly as they were defined in the <font face="Courier New">Web.config</font>) using this proxy object:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #008000">// Set Profile property</span>
Profile.FirstName = txtBoxFirstName.Text;

<span style="color: #008000">// Retrieve Profile property</span>
<span style="color: #0000ff">int</span> age = Profile.Age;</pre></div><h3>Read On!</h3><p>This crash course of the ASP.NET Provider system is pretty much done I guess you could say, as far as a tutorial goes that is.&#160; I still have another two posts on the radar that will be coming over the next few days regarding issues and workarounds that I encountered.&#160; One post will deal with generating this <font face="Courier New">Profile</font> proxy class under the Visual Studio <font face="Courier New">Web Application</font> project template.&#160; The other post will be about the advantages of using this system under IIS 7 found in Windows Vista and Server 2008; it will also include some issues with using this system if some of your content is static HTML instead of ASPX pages.&#160; Here are the links to these two posts:</p><ul><li><a href="http://murrayon.net/2009/02/aspnet-profile-and-web-application.html">ASP.NET Profile and Web Application Projects</a> </li><li><a href="http://murrayon.net/2009/02/iis-7-and-aspnet-providers-membership.html">IIS 7 and ASP.NET Providers (Membership, Roles, and Profile)</a> </li></ul><p>It has been a very pleasant experience overall to work with the ASP.NET Provider system because of it's highly customizable and flexible design.&#160; If your <a title="ASP.NET Providers - Membership" href="http://murrayon.net/2009/01/aspnet-providers-membership.html">Membership</a>, <a title="ASP.NET Providers - Role Management" href="http://murrayon.net/2009/02/aspnet-providers-role-management.html">Role Management</a>, and Profile needs are fairly common and typical, this framework is a piece of cake to incorporate into your product (including your existing ones, no matter how out-of-date they are).&#160; Hope you've enjoyed the series!</p>
</span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>mamali</div>
<div class='content'>
perfect, thank you very much...</div>
</div>
<div class='comment'>
<div class='author'>Bryan</div>
<div class='content'>
I&#39;ve been using the profile system with good results, but in the last couple of weeks, I must have made some change because now I&#39;m getting the error: &quot;Column name &#39;UserID&#39; appears more than once in the result column list.&quot; I can see the SQL command that&#39;s generated in SqlTableProfileProvider.vb, and it indeed contains two columns with name UserID. The problem is, I&#39;m unable to find the source of the second UserID column. What can I do to trace and resolve the problem?</div>
</div>
<div class='comment'>
<div class='author'>Esteban Araya</div>
<div class='content'>
@Shalan &amp; Mike:<br /><br />I&#39;d just store the photo on a file server, and then just store a UNC path to the photo on the custom profile table.<br /><br />That way, all you&#39;d have to do is: read the path, load the photo &amp; display it.<br /><br />Hope this helps!</div>
</div>
<div class='comment'>
<div class='author'>Mike Murray</div>
<div class='content'>
Ya know, I&#39;m not really sure.  But I am wondering if I&#39;ve got something that might lead to an answer.  I&#39;m looking at the examples in my blog post and notice the Guid field.  In order for that data type to work, it had to be specified as System.Guid, I&#39;m assuming because it&#39;s not a primitive type.  Perhaps something similar has to be done, like System.Array or System.Array&lt;Byte&gt;...not really sure.  The other thing I can think of is maybe using the primitive version of &quot;byte&quot; instead of &quot;Byte&quot;.<br /><br />Just a few random guesses.  Let us know if you find the resolution and post back here.  Thanks!</div>
</div>
<div class='comment'>
<div class='author'>shalan</div>
<div class='content'>
Hi Mike.  Excellent article! I've been using TableProvider for some time now, but recently I had a first case where the user wanted to incorporated photos as part of their profile.<br /><br />I have tried to accomplish but to no avail. Its setup as a varbinary field in the database, and a Byte[] datatype in the web.config, but I keep getting an error saying that it could not load type "Byte[]".  Have you tried this?  Do you have any suggestions?<br /><br />Thanx!</div>
</div>
<div class='comment'>
<div class='author'>Mike Murray</div>
<div class='content'>
Very good question.<BR/><BR/>In my particular use case, the need to delete a user account from the system would be so rare that I am content to leave it a manual process.  And since I'll be the one managing it for a while, I'm content with this solution for the time being.<BR/><BR/>I will give this question some thought, however, and I will post back if come up with an idea or two...that is if someone else doesn't beat me to it here in the comments.<BR/><BR/>Please do let us know if you come up with something yourself.  Thanks, and good luck.</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Has anybody came up with a way to automatically delete custom profile table along with the rest of the membership information?</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Providers - Membership]]></title>
    <link href="http://mkmurray.com/blog/2009/01/30/asp-net-providers-membership/"/>
    <updated>2009-01-30T14:21:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/01/30/asp-net-providers-membership</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This blog post is part of a series about the ASP.NET Providers (namely Membership, Role Management, and Profile). The introductory post in the series can be found at the following link, which introduces the <a href="http://en.wikipedia.org/wiki/Provider_model" target="_blank">Provider Model pattern</a> and gives a personal example of an implementation I have been working on:</p><ul><li><a href="http://murrayon.net/2009/01/aspnet-providers-membership-role-and.html">ASP.NET Providers - Membership, Role, and Profile</a></li></ul><p>This post will deal with adding the Membership functionality to your website.</p> <span class='fullpost'> <h3>Membership Provider Configuration</h3><p>Now that your DB is set up, there are a few snippets that need to be added to your <span style="font-family: courier new">Web.config</span>. It involves adding a connection string and adding a new membership provider, as in the sample below:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 350px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">connectionStrings</span><span style="color: #0000ff">&gt;</span><br />        <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;MyDB&quot;</span> <span style="color: #ff0000">connectionString</span><span style="color: #0000ff">=&quot;...&quot;</span> <span style="color: #0000ff">/&gt;</span><br />    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">connectionStrings</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span><br />        ... authentication &amp; authorization settings ...<br /><br />        <span style="color: #0000ff">&lt;</span><span style="color: #800000">membership</span> <span style="color: #ff0000">defaultProvider</span><span style="color: #0000ff">=&quot;ConfiguredMembershipProvider&quot;</span><span style="color: #0000ff">&gt;</span><br />            <span style="color: #0000ff">&lt;</span><span style="color: #800000">providers</span><span style="color: #0000ff">&gt;</span><br />                <span style="color: #0000ff">&lt;</span><span style="color: #800000">add</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">=&quot;ConfiguredMembershipProvider&quot;</span><br />                     <span style="color: #ff0000">type</span><span style="color: #0000ff">=&quot;System.Web.Security.SqlMembershipProvider&quot;</span><br />                     <span style="color: #ff0000">connectionStringName</span><span style="color: #0000ff">=&quot;MyDB&quot;</span><br />                     <span style="color: #ff0000">applicationName</span><span style="color: #0000ff">=&quot;SampleWebSite&quot;</span><br />                     <span style="color: #ff0000">minRequiredPasswordLength</span><span style="color: #0000ff">=&quot;5&quot;</span><br />                     <span style="color: #ff0000">minRequiredNonalphanumericCharacters</span><span style="color: #0000ff">=&quot;0&quot;</span> <span style="color: #0000ff">/&gt;</span><br />            <span style="color: #0000ff">&lt;/</span><span style="color: #800000">providers</span><span style="color: #0000ff">&gt;</span><br />        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">membership</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span><br /><span style="color: #0000ff">&lt;/</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre></div><p><strong><u>WARNING</u>: </strong>According to Microsoft, you should <strong><u>never</u></strong> use the default provider settings and should <strong><u>always</u></strong> add a new, configured provider; in addition you <strong><u>must</u></strong> be sure to specify the <span style="font-family: courier new">applicationName</span> attribute! See <a title="Always set the " href="http://weblogs.asp.net/scottgu/archive/2006/04/22/Always-set-the-_2200_applicationName_2200_-property-when-configuring-ASP.NET-2.0-Membership-and-other-Providers.aspx" other="other" and="and" configuring="configuring" when="when" property="property" membership="membership" net="ASP.NET" 0="2.0">Scott Guthrie's blog post on this topic</a> for more details. Apparently, you can also use a value of <span style="font-family: courier new">&quot;/&quot;</span> for the <span style="font-family: courier new">applicationName</span> and it will use the root application name.</p><p>The last two attributes of the <span style="font-family: courier new">add</span> node are only a couple of several membership features you can configure. For a complete list of attributes you can configure, see <a href="http://msdn.microsoft.com/en-us/library/whae3t94.aspx">&lt;add&gt; Element for Providers for Membership</a>.</p><h3>Securing Site Content by Requiring Authentication</h3><p>With 5 more lines of configuration added to your <span style="font-family: courier new">Web.config</span>, you can have the whole site secured and accessible only by user account authentication. Even better, you can make that 6 lines added to the <span style="font-family: courier new">Web.config</span>, add a <span style="font-family: courier new">Login.aspx</span> page, and drop in a <span style="font-family: courier new">Login</span> control from the Toolbox and you will get auto-redirect to the login page if someone tries to hit any page you've now secured. The framework is even smart enough to return you to that desired page after successful login; it accomplishes this by redirecting you to the login page but by adding a <span style="font-family: courier new">ReturnUrl</span> query string attribute to know where to go after authentication.</p><p>Here are the additional lines for your <span style="font-family: courier new">Web.config</span> (put them under the <span style="font-family: courier new">system.web</span> node):</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">deny</span> <span style="color: #ff0000">users</span><span style="color: #0000ff">=&quot;?&quot;</span> <span style="color: #0000ff">/&gt;</span><br /><span style="color: #0000ff">&lt;/</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span><br /><br /><span style="color: #0000ff">&lt;</span><span style="color: #800000">authentication</span> <span style="color: #ff0000">mode</span><span style="color: #0000ff">=&quot;Forms&quot;</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">forms</span> <span style="color: #ff0000">defaultUrl</span><span style="color: #0000ff">=&quot;index.html&quot;</span> <span style="color: #ff0000">loginUrl</span><span style="color: #0000ff">=&quot;Login.aspx&quot;</span> <span style="color: #0000ff">/&gt;</span><br /><span style="color: #0000ff">&lt;/</span><span style="color: #800000">authentication</span><span style="color: #0000ff">&gt;</span></pre></div><p><u><strong>NOTE</strong></u>: You will likely already have an <span style="font-family: courier new">authentication</span> node in your <span style="font-family: courier new">Web.config</span>, but it's <span style="font-family: courier new">mode</span> may be set to the default <span style="font-family: courier new">&quot;Windows&quot;</span> value. To use the Membership Provider for authentication, you must have this value set to <span style="font-family: courier new">&quot;Forms.&quot;</span></p><p>The optional 6th line I spoke of earlier is the <span style="font-family: courier new">forms</span> node under the <span style="font-family: courier new">authentication</span> node. The <span style="font-family: courier new">defaultUrl</span> attribute of this line is used to tell the framework where to go after successful login if there is no <span style="font-family: courier new">ReturnUrl</span> specified in the query string. The <span style="font-family: courier new">loginUrl</span> attribute is used to specify the page the user is redirected to if they are attempting to hit a page that requires authentication.</p><p>The <span style="font-family: courier new">deny</span> node is using the question mark (<span style="font-family: courier new">?</span>) wildcard character, which is used for anonymous users (or those that haven't been authenticated yet); the asterisk (<span style="font-family: courier new">*</span>) wildcard is used to signify all users browsing the site. Since we are dealing with the <span style="font-family: courier new">Web.config</span> at the root of the site, this <span style="font-family: courier new">deny</span> rule will apply to the whole site and it's subdirectories. You can either put a <span style="font-family: courier new">Web.config</span> in each subfolder that requires an overriding or more restrictive set of <span style="font-family: courier new">allow</span> and <span style="font-family: courier new">deny</span> rules, or you can actually specify <span style="font-family: courier new">location</span> elements in your <span style="font-family: courier new">Web.config</span>, as is shown in the following example (basically you could have several of these <span style="font-family: courier new">location</span> elements, each with their own <span style="font-family: courier new">authorization</span> rules):</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;</span><span style="color: #800000">location</span> <span style="color: #ff0000">path</span><span style="color: #0000ff">=&quot;Login.aspx&quot;</span><span style="color: #0000ff">&gt;</span><br />        <span style="color: #0000ff">&lt;</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span><br />            <span style="color: #0000ff">&lt;</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span><br />                <span style="color: #0000ff">&lt;</span><span style="color: #800000">allow</span> <span style="color: #ff0000">users</span><span style="color: #0000ff">=&quot;?&quot;</span> <span style="color: #0000ff">/&gt;</span><br />            <span style="color: #0000ff">&lt;/</span><span style="color: #800000">authorization</span><span style="color: #0000ff">&gt;</span><br />        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">system.web</span><span style="color: #0000ff">&gt;</span><br />    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">location</span><span style="color: #0000ff">&gt;</span><br /><span style="color: #0000ff">&lt;/</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre></div><p>As far as I can tell, this sample configuration above isn't necessary if you have specified your login page in the <span style="font-family: courier new">loginUrl</span> attribute of the <span style="font-family: courier new">authentication/forms</span> node like we did in the previous code snippet. But this sample is at least illustrative of the location-based authorization rules.</p><p>Personally, I decided to create a folder named<span style="font-family: courier new"> Public</span> in my site and I give it its own <span style="font-family: courier new">Web.config</span> that allows all users (including anonymous ones) access to the containing web pages. This folder currently contains the login, user account registration, account activation (a link included in the email sent upon registration), and password retrieval pages, all of which would need unrestricted access for anonymous users.</p><h3>Test Your Membership Provider</h3><p>With all of this now in place, you should be able to use the <span style="font-family: courier new">ASP.NET Website Administration Tool</span> launched from Visual Studio to create a few new user accounts. I mentioned how to launch this utility earlier in this series with a post titled <a href="http://murrayon.net/2009/01/aspnet-providers-getting-started.html">ASP.NET Providers - Getting Started</a>. Then you can double-check your membership system is working by logging in with your newly created credentials. Also, you can now create a user account registration page (utilizing the <span style="font-family: courier new">CreateUserWizard</span> control) and a password retrieval/reset page (using the <span style="font-family: courier new">PasswordRecovery</span> control). All of the controls I have named throughout this post are highly skinable and configurable via numerous attributes and templates; they also contain flexible task workflows that you can override or plug into by registering to any of several event listeners.</p><p>One other thing that needs to be done if you want to enable the email notification capabilities is to set the SMTP settings in your <font face="Courier New">Web.config</font>.&#160; Here is a snippet you would put right above the <font face="Courier New">system.web</font> node:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">system.net</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">mailSettings</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">smtp</span> <span style="color: #ff0000">from</span><span style="color: #0000ff">=&quot;service@website.com&quot;</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">network</span> <span style="color: #ff0000">host</span><span style="color: #0000ff">=&quot;mail.domain.com&quot;</span> <span style="color: #ff0000">port</span><span style="color: #0000ff">=&quot;25&quot;</span>
                     <span style="color: #ff0000">userName</span><span style="color: #0000ff">=&quot;...&quot;</span> <span style="color: #ff0000">password</span><span style="color: #0000ff">=&quot;...&quot;</span> <span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">smtp</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">mailSettings</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">system.net</span><span style="color: #0000ff">&gt;</span></pre></div><h3>Membership API and MembershipInfo Class</h3><p>There is also a <span style="font-family: courier new">Membership</span> API and an accompanying <span style="font-family: courier new">MembershipInfo</span> class that you can call in order to retrieve and update user info from the database if you wanted to create your own custom controls or page logic. For instance, the following is code that I adapted <a title="Examining ASP.NET 2.0&#39;s Membership, Roles, and Profile - Part 11" href="http://aspnet.4guysfromrolla.com/articles/062508-1.aspx">from Part 11 of the tutorial I mentioned earlier</a> in the introductory post of this series; this code activates an account when a user clicks the link emailed to them during registration:</p><div style="border-right: gray 1px solid; padding-right: 4px; border-top: gray 1px solid; padding-left: 4px; font-size: 8pt; padding-bottom: 4px; margin: 20px 0px 10px; border-left: gray 1px solid; width: 97.5%; cursor: text; max-height: 650px; line-height: 12pt; padding-top: 4px; border-bottom: gray 1px solid; font-family: consolas, &#39;Courier New&#39;, courier, monospace; background-color: #f4f4f4"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, &#39;Courier New&#39;, courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">partial</span> <span style="color: #0000ff">class</span> Verify : System.Web.UI.Page<br />{<br />    <span style="color: #0000ff">protected</span> <span style="color: #0000ff">void</span> Page_Load(<span style="color: #0000ff">object</span> sender, EventArgs e)<br />    {<br />        <span style="color: #008000">//Make sure valid querystring value was passed</span><br />        <span style="color: #0000ff">if</span> (<span style="color: #0000ff">string</span>.IsNullOrEmpty(Request.QueryString[<span style="color: #006080">&quot;ID&quot;</span>]) ||<br />            !Regex.IsMatch(Request.QueryString[<span style="color: #006080">&quot;ID&quot;</span>],<br />                <span style="color: #006080">@&quot;[0-9a-f]{8}\-([0-9a-f]{4}\-){3}[0-9a-f]{12}&quot;</span>))<br />        {<br />            InformationLabel.Text = <span style="color: #006080">&quot;An invalid ID value was passed &quot;</span> +<br />                <span style="color: #006080">&quot;in through the query string.&quot;</span>;<br />        }<br />        <span style="color: #0000ff">else</span><br />        {<br />            <span style="color: #008000">//ID exists and is kosher, approve user</span><br />            <span style="color: #008000">//Get the ID sent in on query string</span><br />            Guid userId = <span style="color: #0000ff">new</span> Guid(Request.QueryString[<span style="color: #006080">&quot;ID&quot;</span>]);<br /><br />            <span style="color: #008000">//Get user object</span><br />            MembershipUser userInfo = Membership.GetUser(userId);<br /><br />            <span style="color: #0000ff">if</span> (userInfo == <span style="color: #0000ff">null</span>)<br />            {<br />                <span style="color: #008000">//Could not find user!</span><br />                InformationLabel.Text = <span style="color: #006080">&quot;The user account could not &quot;</span> +<br />                    <span style="color: #006080">&quot;be found in the membership database.&quot;</span>;<br />            }<br />            <span style="color: #0000ff">else</span><br />            {<br />                <span style="color: #008000">//User is valid, approve them</span><br />                userInfo.IsApproved = <span style="color: #0000ff">true</span>;<br />                Membership.UpdateUser(userInfo);<br /><br />                <span style="color: #008000">//Display a message</span><br />                InformationLabel.Text = <span style="color: #006080">&quot;Your account has been &quot;</span> +<br />                    <span style="color: #006080">&quot;verified and you can now log into the site.&quot;</span>;<br />            }<br />        }<br />    }<br />}</pre></div><h3>Read On!</h3><p>Continue onward by reading the next blog post in this series found at the following link:</p><ul><li><a href="http://murrayon.net/2009/02/aspnet-providers-role-management.html">ASP.NET Providers - Role Management</a></li></ul>
</span>  </div>

]]></content>
  </entry>
  
</feed>
