<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bootstrapper | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/bootstrapper/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Setup Bootstrappers]]></title>
    <link href="http://mkmurray.com/blog/2009/11/11/custom-setup-bootstrappers/"/>
    <updated>2009-11-11T15:03:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/11/11/custom-setup-bootstrappers</id>
    <content type="html"><![CDATA[<div class='post'>
<p>At work, we have a line of desktop products for one of clients installed on the user’s Windows machine via MSI installers.&#160; We use Visual Studio Setup Projects to create the MSI installers.&#160; Visual Studio also provides the ability to create setup bootstrappers to make sure the user has all the prerequisites needed for the MSI install technology and any dependencies required by your desktop product.&#160; These bootstrappers are unmanaged code, because you can’t always depend on the .NET framework already being there (at least not until everyone is off of XP and lower).&#160; I have developed a solution that has worked for the last year or more, but has felt clumsy and slapped together.&#160; Recently I found the <a href="http://dotnetinstaller.codeplex.com/">open source project called dotNetInstaller</a> which has better provided me with the control and flexibility I need for custom logic during bootstrap and install time.&#160; I’ll first introduce you to my “hack” solution.</p> <span class="fullpost">   <p>It has been difficult for me to find ways to tie into the bootstrapper logic workflow to add in custom logic during installs, and Visual Studio is very rigid in its flexibility and basic in its configuration options in this regard.&#160; Until recently, I had settled on writing managed, C# code for this custom logic meant to run before or after the MSI installer, and then creating another unmanaged <font face="Courier New">setup.exe</font> bootstrapper to ensure the .NET framework was installed just so that executable could run.&#160; So the user would run this new unmanaged <font face="Courier New">setup.exe</font> bootstrapper (making sure .NET framework was installed), which would then call my managed custom logic executable, which would then call the MSI installer’s unmanaged, Visual Studio-generated <font face="Courier New">setup.exe</font> bootstrapper (ensuring more prerequisites were installed), which would then finally install the MSI, and which would then lastly return to my managed custom logic executable for any post-install, clean up logic.&#160; I describe this solution in full (and how to generate the same bootstrappers that Visual Studio creates using MSBuild outside the IDE) in a StackOverflow.com answer that I submitted:</p>    <p><a title="http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846" href="http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846">http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846</a></p>    <p>Well, recently I found the <a href="http://dotnetinstaller.codeplex.com/">dotNetInstaller project on CodePlex.com</a> and have found it to be the control and flexibility I need for custom logic when bootstrapping installers.&#160; Not only does it give you great control over prerequisite install order, it also gives you the ability to run code after MSI install and to also filter on CPU architecture types, OS versions, and other registry or file system conditions.&#160; I have currently setup branching scenarios for the prerequisites based on if the user has a 32-bit (x86) or 64-bit (x64) OS.&#160; This utility will even let you brand the bootstrapper with a banner and icon, which is a change of pace from the plain and unlabeled bootstrapper that Visual Studio and MSBuild produce.</p>    <p>If you have custom bootstrapping needs, I have to highly recommend you give dotNetInstaller a look.&#160; Hopefully it will prove as flexible and powerful for your needs as it has for mine.</p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from VS 2005 to 2008]]></title>
    <link href="http://mkmurray.com/blog/2008/02/28/migrating-from-vs-2005-to-2008/"/>
    <updated>2008-02-28T10:07:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/02/28/migrating-from-vs-2005-to-2008</id>
    <content type="html"><![CDATA[<div class='post'>
<p>So I just finished migrating a whole slew of our large solutions and projects from Visual Studio 2005 to Visual Studio 2008.&#160; The conversion process itself was really simple and painless (and not too time consuming).&#160; There were a few gotchas with our Setup (AKA Deployment) Projects however:</p> <span class='fullpost'> <ol>   <li>It appears that Microsoft moved the location of it's prerequisite packages for the BootStrapper for VS 2008.&#160; Microsoft used to keep them at <font face="Courier New">C:\Program Files\Microsoft Visual Studio 8\SDK\v2.0\BootStrapper\Packages</font>, but now in 2008 it looks they have moved them to a more isolated and common location.&#160; The new location is <font face="Courier New">C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bootstrapper\Packages</font>.&#160; When I converted our setup projects to VS 2008 format, some of the prerequisites couldn't be found because of this.&#160; I just went to the old VS 2005 BootStrapper location and copied the folders of the packages I needed to the new VS 2008 location (for example, the <font face="Courier New">MDAC</font> package is under a folder called <font face="Courier New">MDAC28</font>, and it is not in VS 2008's list of packages by default anymore). </li>    <li>We had a folder structure into which we were dropping the <font face="Courier New">Primary Output</font> of a web application in our setup projects.&#160; For a web application project, the <font face="Courier New">Primary Output</font> is the DLL libraries in the <font face="Courier New">bin</font> directory of the web site.&#160; In VS 2005, you would create a <font face="Courier New">bin</font> folder at the root level of the web site and put the <font face="Courier New">Primary Output</font> down a level in the <font face="Courier New">bin</font> folder.&#160; Well, now in VS 2008, it appears that wherever you put the <font face="Courier New">Project Output</font>, the setup project will create a <font face="Courier New">bin</font> folder at that location and put the DLL libraries in that <font face="Courier New">bin</font> folder one level down from where you put the <font face="Courier New">Project Output</font>.&#160; So I had to go back through our setup projects and move the location of those <font face="Courier New">Primary Outputs</font> one level up (or else it would create a <font face="Courier New">bin </font>folder inside of the <font face="Courier New">bin</font> folder). </li> </ol>  <p>One nice thing about the migration to VS 2008 is that it looks like Microsoft has a new version of the <font face="Courier New">Visual C++ Runtime Libraries</font> prerequisite (I don't know if the libraries are actually any different, but at least the redistributable package and logic are improved).&#160; We have a set of products that have this package as a prerequisite during install.&#160; Every time you ran the installer it would reinstall the package.&#160; It was almost as if it wasn't doing any logic to detect if it already had the package installed.&#160; The following link might be the explanation of why we were seeing this odd behavior (even though it references the <font face="Courier New">MDAC</font> package):&#160; <a title="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=339044&amp;SiteID=1" href="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=339044&amp;SiteID=1">http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=339044&amp;SiteID=1</a></p>  <p>Well, the new <font face="Courier New">Visual C++ Runtime Libraries</font> package works great and doesn't keep reinstalling itself as a prerequisite with every install or update of one of our products that depend on it.</p>  <p><strong><u>FOLLOWUP (06/19/08)</u></strong>:&#160; Actually, we ended it up having to revert back to the <font face="Courier New">Visual C++ Runtime Libraries</font> from Visual Studio 2005, as another prerequisite we were using (<a href="http://www.dtsearch.com/">DTSearch</a>) wasn't compatible with the new C++ libraries with VS 2008.&#160; We'll check again next year.</p> </span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
This is extraordinary!  As per comment your post 2, folder structure.<br /><br />I am actually moving straight from 2005 to 2010, and had come across just this problem.  I hadn&#39;t thought it might actually emanate from 2008 in the first place.  And this was the only thread I could find covering just this.  I am in process of moving the POs one level up...</div>
</div>
<div class='comment'>
<div class='author'>Anonymous</div>
<div class='content'>
Your number 2 post regarding folder structure was the first I&#39;ve seen of its kind.  I was particularly confused since each converted solution I tried gave a Parser error.  I&#39;ve been researching this issue for days why our 2005 solutions haven&#39;t been converted to 2008 successfully.  Thanks so much for posting this info!</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
