<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rx Framework | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/rx-framework/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maybe from Murray Monads]]></title>
    <link href="http://mkmurray.com/blog/2010/09/21/maybe-from-murray-monads/"/>
    <updated>2010-09-21T18:33:00-06:00</updated>
    <id>http://mkmurray.com/blog/2010/09/21/maybe-from-murray-monads</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Off and on for the last six months, I have probably seen and read at least a half dozen introductions and tutorials on <a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)">monads</a>, a functional programming construct based on the mathematical monads from category theory.&#160; Monads are known for their headache-inducing explanations, and I’ve had my fair share.&#160; Every tutorial I’ve committed time to mentions the endless possibilities of using such constructs to improve your code, but I’ve had a hard time finding real-world examples of using this stuff out in the wild (<a href="http://stackoverflow.com/questions/866912/what-is-the-compelling-scenario-for-using-monads-in-c">much like this Stack Overflow poster</a>, whose link I only found just now).&#160; It has recently become a quest of mine to find some C# code we all write that could be improved by a monad.</p>  <p>I am now going to attempt to introduce a Maybe monad that I cooked up, but I warn you that I have no idea what I’m doing or if I’m staying within the rules for what makes a monad by definition a monad.&#160; Don’t worry though, you have nothing to lose; I’m the only one taking a risk at looking foolish, and it’s all at the expense of my reputation and not yours.&#160; Should be fun!</p> <span class="fullpost">   <h3>“It is not the spoon that bends, it is only yourself”</h3>    <p>From the <a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)">Wikipedia article linked to above</a>:</p>    <blockquote>     <p>“In functional programming, a monad is a kind of abstract data type constructor used to represent computations (instead of data in the domain model). Monads allow the programmer to chain actions together to build a pipeline, in which each action is decorated with additional processing rules provided by the monad. Programs written in functional style can make use of monads to structure procedures that include sequenced operations, or to define arbitrary control flows (like handling concurrency, continuations, or exceptions).</p>      <p>…</p>      <p>“A programmer will compose monadic functions to define a data-processing pipeline. The monad acts as a framework, as it's a reusable behavior that decides the order in which the specific monadic functions in the pipeline are called, and manages all the undercover work required by the computation.”</p>   </blockquote>    <p>The promised tenets of monads are increased code readability and algorithm composability, an example of preferring declarative code over imperative, procedural code.&#160; In the case of the Maybe monad, it is a wrapper around types that might have an invalid state like <font face="Courier New">null</font> or <font face="Courier New">nothing</font>.&#160; The lure of the Maybe monad is the ability to deal with values that might be in this invalid state without having to explicitly check for null before continuing or exceptions being thrown in your algorithms.</p>    <p>I first found <a href="http://abdullin.com/journal/2009/10/6/zen-development-practices-c-maybe-monad.html">a post by Rinat Abdullin</a> where he introduced his version of a C# Maybe monad.&#160; I downloaded the library and attempted to figure out how to use it in code I could possibly write any given day.&#160; I tried mimicking the <font face="Courier New">HttpContext.Request.Params</font> collection commonly used in ASP.NET pages and HTTP handlers to retrieve the passed in query string or post values on the <font face="Courier New">Request</font> object.&#160; If you ask that collection for a parameter that was not passed in on the request, it returns a null instead of the string value.&#160; Common practice is to then use a bunch of <font face="Courier New">if</font> statements and key off the fact that certain query string or post parameters may or may not exist.</p>    <p>The problem I ran into with Rinat’s implemenation is that I wrote the code using the monad how I thought it should help me, and then ran into compiler errors and runtime exceptions because of the expectation that Maybe objects couldn’t be constructed around null values.&#160; Here is the twitter conversation I had with Rinat in regard to this misconception that I had:</p>   <span style="widows: 2; text-transform: none; text-indent: 0px; border-collapse: separate; font: medium &#39;Times New Roman&#39;; white-space: normal; orphans: 2; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px" class="Apple-style-span"><span style="font-family: verdana, tahoma, arial, &#39;Trebuchet MS&#39;, sans-serif, georgia, courier, &#39;Times New Roman&#39;, serif; color: rgb(0,58,126); font-size: 12px; font-weight: bold" class="Apple-style-span">       <div style="padding-bottom: 15px; background-color: rgb(234,242,249); margin: 0px; padding-left: 15px; width: 550px; padding-right: 15px; padding-top: 15px; background-origin: initial; background-clip: initial" class="post1">         <div style="padding-bottom: 0px; margin: 0px 15px 0px 0px; padding-left: 0px; width: 80px; padding-right: 0px; display: block; float: left; height: 80px; padding-top: 0px" class="avatar"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View murrayondotnet&#39;s Twitter Page" href="http://www.twitter.com/murrayondotnet" target="_blank"><img style="border-bottom: rgb(204,204,204) 1px solid; border-left: rgb(204,204,204) 1px solid; padding-bottom: 3px; margin: 0px; padding-left: 3px; padding-right: 3px; border-top: rgb(204,204,204) 1px solid; border-right: rgb(204,204,204) 1px solid; padding-top: 3px" alt="murrayondotnet&#39;s avatar" src="http://a1.twimg.com/profile_images/547516901/profilepic_bigger.PNG" width="73" height="73" /></a></div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; float: left; padding-top: 0px" class="post">           <h5 style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; font: bold 16px verdana, tahoma, arial, &#39;Trebuchet MS&#39;, sans-serif, georgia, courier, &#39;Times New Roman&#39;, serif; color: rgb(98,98,98); padding-top: 0px"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View murrayondotnet&#39;s Twitter Page" href="http://www.twitter.com/murrayondotnet" target="_blank">murrayondotnet</a><span class="Apple-converted-space">&#160;</span>says:</h5>            <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; width: 450px; padding-right: 0px; font: 14px/19px tahoma, arial; color: rgb(98,98,98); padding-top: 0px" class="mainpost">@abdullin Can you make your MaybeMonad in Lokad lib accept null at construct or explicit/implicit cast? Maybe&lt;SomeType&gt; monad = varThatsNull</div>         </div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; clear: both; padding-top: 0px" class="clear"></div>       </div>        <div style="padding-bottom: 15px; background-color: rgb(255,255,255); margin: 0px; padding-left: 15px; width: 550px; padding-right: 15px; padding-top: 15px; background-origin: initial; background-clip: initial" class="post2">         <div style="padding-bottom: 0px; margin: 0px 15px 0px 0px; padding-left: 0px; width: 80px; padding-right: 0px; display: block; float: left; height: 80px; padding-top: 0px" class="avatar"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View abdullin&#39;s Twitter Page" href="http://www.twitter.com/abdullin" target="_blank"><img style="border-bottom: rgb(204,204,204) 1px solid; border-left: rgb(204,204,204) 1px solid; padding-bottom: 3px; margin: 0px; padding-left: 3px; padding-right: 3px; border-top: rgb(204,204,204) 1px solid; border-right: rgb(204,204,204) 1px solid; padding-top: 3px" alt="abdullin&#39;s avatar" src="http://a3.twimg.com/profile_images/755788123/0_1f297_e07be068_orig_bigger.jpg" width="73" height="73" /></a></div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; float: left; padding-top: 0px" class="post">           <h5 style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; font: bold 16px verdana, tahoma, arial, &#39;Trebuchet MS&#39;, sans-serif, georgia, courier, &#39;Times New Roman&#39;, serif; color: rgb(98,98,98); padding-top: 0px"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View abdullin&#39;s Twitter Page" href="http://www.twitter.com/abdullin" target="_blank">abdullin</a><span class="Apple-converted-space">&#160;</span>says:</h5>            <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; width: 450px; padding-right: 0px; font: 14px/19px tahoma, arial; color: rgb(98,98,98); padding-top: 0px" class="mainpost">@murrayondotnet No, this would violate the idea of MaybeMonad (as in Lokad libs). But you can copy code and tweak it to your needs locally.</div>         </div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; clear: both; padding-top: 0px" class="clear"></div>       </div>        <div style="padding-bottom: 15px; background-color: rgb(234,242,249); margin: 0px; padding-left: 15px; width: 550px; padding-right: 15px; padding-top: 15px; background-origin: initial; background-clip: initial" class="post1">         <div style="padding-bottom: 0px; margin: 0px 15px 0px 0px; padding-left: 0px; width: 80px; padding-right: 0px; display: block; float: left; height: 80px; padding-top: 0px" class="avatar"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View murrayondotnet&#39;s Twitter Page" href="http://www.twitter.com/murrayondotnet" target="_blank"><img style="border-bottom: rgb(204,204,204) 1px solid; border-left: rgb(204,204,204) 1px solid; padding-bottom: 3px; margin: 0px; padding-left: 3px; padding-right: 3px; border-top: rgb(204,204,204) 1px solid; border-right: rgb(204,204,204) 1px solid; padding-top: 3px" alt="murrayondotnet&#39;s avatar" src="http://a1.twimg.com/profile_images/547516901/profilepic_bigger.PNG" width="73" height="73" /></a></div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; float: left; padding-top: 0px" class="post">           <h5 style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; font: bold 16px verdana, tahoma, arial, &#39;Trebuchet MS&#39;, sans-serif, georgia, courier, &#39;Times New Roman&#39;, serif; color: rgb(98,98,98); padding-top: 0px"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View murrayondotnet&#39;s Twitter Page" href="http://www.twitter.com/murrayondotnet" target="_blank">murrayondotnet</a><span class="Apple-converted-space">&#160;</span>says:</h5>            <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; width: 450px; padding-right: 0px; font: 14px/19px tahoma, arial; color: rgb(98,98,98); padding-top: 0px" class="mainpost">@abdullin Figured this was case; what does it violate? I'm still new to monads. Thought one would be able construct monad around maybe null</div>         </div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; clear: both; padding-top: 0px" class="clear"></div>       </div>        <div style="padding-bottom: 15px; background-color: rgb(255,255,255); margin: 0px; padding-left: 15px; width: 550px; padding-right: 15px; padding-top: 15px; background-origin: initial; background-clip: initial" class="post2">         <div style="padding-bottom: 0px; margin: 0px 15px 0px 0px; padding-left: 0px; width: 80px; padding-right: 0px; display: block; float: left; height: 80px; padding-top: 0px" class="avatar"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View abdullin&#39;s Twitter Page" href="http://www.twitter.com/abdullin" target="_blank"><img style="border-bottom: rgb(204,204,204) 1px solid; border-left: rgb(204,204,204) 1px solid; padding-bottom: 3px; margin: 0px; padding-left: 3px; padding-right: 3px; border-top: rgb(204,204,204) 1px solid; border-right: rgb(204,204,204) 1px solid; padding-top: 3px" alt="abdullin&#39;s avatar" src="http://a3.twimg.com/profile_images/755788123/0_1f297_e07be068_orig_bigger.jpg" width="73" height="73" /></a></div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; float: left; padding-top: 0px" class="post">           <h5 style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; font: bold 16px verdana, tahoma, arial, &#39;Trebuchet MS&#39;, sans-serif, georgia, courier, &#39;Times New Roman&#39;, serif; color: rgb(98,98,98); padding-top: 0px"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View abdullin&#39;s Twitter Page" href="http://www.twitter.com/abdullin" target="_blank">abdullin</a><span class="Apple-converted-space">&#160;</span>says:</h5>            <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; width: 450px; padding-right: 0px; font: 14px/19px tahoma, arial; color: rgb(98,98,98); padding-top: 0px" class="mainpost">@murrayondotnet check out the article on Maybe monads in Lokad libs: http://bit.ly/1GJlNN</div>         </div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; clear: both; padding-top: 0px" class="clear"></div>       </div>        <div style="padding-bottom: 15px; background-color: rgb(234,242,249); margin: 0px; padding-left: 15px; width: 550px; padding-right: 15px; padding-top: 15px; background-origin: initial; background-clip: initial" class="post1">         <div style="padding-bottom: 0px; margin: 0px 15px 0px 0px; padding-left: 0px; width: 80px; padding-right: 0px; display: block; float: left; height: 80px; padding-top: 0px" class="avatar"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View murrayondotnet&#39;s Twitter Page" href="http://www.twitter.com/murrayondotnet" target="_blank"><img style="border-bottom: rgb(204,204,204) 1px solid; border-left: rgb(204,204,204) 1px solid; padding-bottom: 3px; margin: 0px; padding-left: 3px; padding-right: 3px; border-top: rgb(204,204,204) 1px solid; border-right: rgb(204,204,204) 1px solid; padding-top: 3px" alt="murrayondotnet&#39;s avatar" src="http://a1.twimg.com/profile_images/547516901/profilepic_bigger.PNG" width="73" height="73" /></a></div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; float: left; padding-top: 0px" class="post">           <h5 style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; font: bold 16px verdana, tahoma, arial, &#39;Trebuchet MS&#39;, sans-serif, georgia, courier, &#39;Times New Roman&#39;, serif; color: rgb(98,98,98); padding-top: 0px"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View murrayondotnet&#39;s Twitter Page" href="http://www.twitter.com/murrayondotnet" target="_blank">murrayondotnet</a><span class="Apple-converted-space">&#160;</span>says:</h5>            <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; width: 450px; padding-right: 0px; font: 14px/19px tahoma, arial; color: rgb(98,98,98); padding-top: 0px" class="mainpost">@abdullin Thanks for the link, thats actually how I found your lib. I didnt see where you say why cant construct maybe monad on null. Help?</div>         </div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; clear: both; padding-top: 0px" class="clear"></div>       </div>        <div style="padding-bottom: 15px; background-color: rgb(255,255,255); margin: 0px; padding-left: 15px; width: 550px; padding-right: 15px; padding-top: 15px; background-origin: initial; background-clip: initial" class="post2">         <div style="padding-bottom: 0px; margin: 0px 15px 0px 0px; padding-left: 0px; width: 80px; padding-right: 0px; display: block; float: left; height: 80px; padding-top: 0px" class="avatar"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View abdullin&#39;s Twitter Page" href="http://www.twitter.com/abdullin" target="_blank"><img style="border-bottom: rgb(204,204,204) 1px solid; border-left: rgb(204,204,204) 1px solid; padding-bottom: 3px; margin: 0px; padding-left: 3px; padding-right: 3px; border-top: rgb(204,204,204) 1px solid; border-right: rgb(204,204,204) 1px solid; padding-top: 3px" alt="abdullin&#39;s avatar" src="http://a3.twimg.com/profile_images/755788123/0_1f297_e07be068_orig_bigger.jpg" width="73" height="73" /></a></div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; float: left; padding-top: 0px" class="post">           <h5 style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; font: bold 16px verdana, tahoma, arial, &#39;Trebuchet MS&#39;, sans-serif, georgia, courier, &#39;Times New Roman&#39;, serif; color: rgb(98,98,98); padding-top: 0px"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View abdullin&#39;s Twitter Page" href="http://www.twitter.com/abdullin" target="_blank">abdullin</a><span class="Apple-converted-space">&#160;</span>says:</h5>            <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; width: 450px; padding-right: 0px; font: 14px/19px tahoma, arial; color: rgb(98,98,98); padding-top: 0px" class="mainpost">@murrayondotnet in essence monad in Lokad guarantees: there will be no nulls around (hence no need to check for them), it replaces null.</div>         </div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; clear: both; padding-top: 0px" class="clear"></div>       </div>        <div style="padding-bottom: 15px; background-color: rgb(234,242,249); margin: 0px; padding-left: 15px; width: 550px; padding-right: 15px; padding-top: 15px; background-origin: initial; background-clip: initial" class="post1">         <div style="padding-bottom: 0px; margin: 0px 15px 0px 0px; padding-left: 0px; width: 80px; padding-right: 0px; display: block; float: left; height: 80px; padding-top: 0px" class="avatar"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View murrayondotnet&#39;s Twitter Page" href="http://www.twitter.com/murrayondotnet" target="_blank"><img style="border-bottom: rgb(204,204,204) 1px solid; border-left: rgb(204,204,204) 1px solid; padding-bottom: 3px; margin: 0px; padding-left: 3px; padding-right: 3px; border-top: rgb(204,204,204) 1px solid; border-right: rgb(204,204,204) 1px solid; padding-top: 3px" alt="murrayondotnet&#39;s avatar" src="http://a1.twimg.com/profile_images/547516901/profilepic_bigger.PNG" width="73" height="73" /></a></div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; float: left; padding-top: 0px" class="post">           <h5 style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; font: bold 16px verdana, tahoma, arial, &#39;Trebuchet MS&#39;, sans-serif, georgia, courier, &#39;Times New Roman&#39;, serif; color: rgb(98,98,98); padding-top: 0px"><a style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; color: rgb(0,58,126); text-decoration: none; padding-top: 0px" title="View murrayondotnet&#39;s Twitter Page" href="http://www.twitter.com/murrayondotnet" target="_blank">murrayondotnet</a><span class="Apple-converted-space">&#160;</span>says:</h5>            <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; width: 450px; padding-right: 0px; font: 14px/19px tahoma, arial; color: rgb(98,98,98); padding-top: 0px" class="mainpost">@abdullin I may try to create my own implementation that hides whether null or not. If so probably base mine off of the nice things in yours</div>         </div>          <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; clear: both; padding-top: 0px" class="clear"></div>       </div>     </span></span>    <p>And so I did.</p>    <h3>Introducing MurrayMonads</h3>    <p>I don’t even like the name.&#160; I’m also not sure this code will ever be used again…by anyone, let alone me (especially since I like some other guy’s implementation better; read on to watch me embarrass myself).&#160; But whatever, Visual Studio asks for a project/solution name and so there it is.&#160; I need some cool theme like Rhino, as used by <a href="http://ayende.com/blog/default.aspx">Ayende</a>.</p>    <p>Speaking of Oren (I will use his proper name instead so that he doesn’t <a href="http://ayende.com/Blog/archive/2010/08/13/how-to-pay-3-times-for-the-same-flight-ticket.aspx">get stuck at the airport unable to board his flight</a>), he posted a link on Twitter to <a href="http://devtalk.net/csharp/chained-null-checks-and-the-maybe-monad/">an article where Dmitri Nesteruk created his own version of the Maybe monad</a>, just as I was starting my experiment.&#160; He used extension methods instead of an explicit monad object wrapper in order to enable the pipelining composability that you can also do with Rinat’s implementation.&#160; Really clever, but there was one small thing that bothered me a bit, and that is how the monad chaining begins with Dmitri’s API.&#160; (Actually, I’ll prove I’m wrong by the end of the post; this is the cause of upcoming embarrassment mentioned above, hooray!)&#160; Because of this, I decided to use his example problem as the basis for my sample that I will show, in order to increase comparability.</p>    <p>So I set off to try and merge the good points of both Rinat’s and Dmitri’s implementations.&#160; I have put my source code up for viewing at Bitbucket.org:&#160; <a href="http://bitbucket.org/murrayondotnet/murraymonads">http://bitbucket.org/murrayondotnet/murraymonads</a></p>    <h3>Are We There Yet?!</h3>    <p>Yes, we are.&#160; Let’s see some code finally.</p>    <p>Here is the code we don’t like writing all the time:</p>    <pre class="brush: csharp">string postCode;
if (person != null)
{
  if (HasMedicalRecord(person) &amp;&amp; person.Address != null)
  {
    CheckAddress(person.Address);
    if (person.Address.PostCode != null)
      postCode = person.Address.PostCode.ToString();
    else
      postCode = &quot;UNKNOWN&quot;;
  }
}</pre>

  <p>This is actually code that you wrote; I took it just yesterday from your current project at work.&#160; I know you’re feeling a bit defensive because of this, but I’m here to help so put down the attitude please.&#160; We’re gonna make your life easier…I hope…</p>

  <p>All in all, it’s code you see every day and there’s not much really wrong with it per se.&#160; I just think it could be cleaner I suppose.&#160; So using Dmitri’s extension methods, you can get that logic down to this:</p>

  <pre class="brush: csharp">string postCode = this.With(x =&gt; person)
  .If(x =&gt; HasMedicalRecord(x))
  .With(x =&gt; x.Address)
  .Do(x =&gt; CheckAddress(x))
  .With(x =&gt; x.PostCode)
  .Return(x =&gt; x.ToString(), &quot;UNKNOWN&quot;);</pre>

  <p>As long as that last <font face="Courier New">ToString</font> method call doesn’t return a null (which one of my use cases does in the <font face="Courier New">TestConsoleApp</font> included in my source code), you will either get the value or <font face="Courier New">“UNKNOWN”</font>.&#160; Looking good!</p>

  <p>So my version of the Maybe monad comes out pretty close to this last one:</p>

  <pre class="brush: csharp">string postCode = person.If(p =&gt; HasMedicalRecord(p))
  .Access(p =&gt; p.Address)
  .Apply(a =&gt; CheckAddress(a))
  .Access(a =&gt; a.PostCode)
  .Convert(pc =&gt; pc.ToString(), &quot;UNKNOWN&quot;);

// or even
string postalCode = person.If(HasMedicalRecord)
  .Access(p =&gt; p.Address)
  .Apply(CheckAddress)
  .Access(a =&gt; a.PostCode)
  .Convert(pc =&gt; pc.ToString(), &quot;UNKNOWN&quot;);</pre>

  <p>The difference between Dmitri’s and mine being how the chain is first started, on the Maybe <font face="Courier New">person</font> object instead of Dmitri’s use of the <font face="Courier New">this</font> keyword.</p>

  <p>Here’s what you’ve been really waiting for where I eat my own words.&#160; Dmitri’s code can also be written like this:</p>

  <pre class="brush: csharp">string postCode = person.If(HasMedicalRecord)
  .With(x =&gt; x.Address)
  .Do(CheckAddress)
  .With(x =&gt; x.PostCode)
  .Return(x =&gt; x.ToString(), &quot;UNKNOWN&quot;);</pre>

  <p>…which appears to take away any advantage of my library.&#160; I officially like his solution better, I just don’t like some of the method names.&#160; So perhaps <a href="http://murrayon.net/2010/09/maybe-monad-extensions.html" target="_blank">I will create another blog post</a> and <a href="http://bitbucket.org/murrayondotnet/maybemonadextensions/" target="_blank">Bitbucket repo with a new library of extension methods</a> instead.&#160; I will leave up this mess-of-a-post public (as well as the source code) so that perhaps others can see the process I went through and learn from my mistakes.</p>

  <h3>Your Turn to Criticize Now</h3>

  <p>Let me have it.&#160; Let me know how crazy I am or if this is even useful.&#160; Let me know if I’m completely misusing the monad principles.&#160; Or, by some weird miracle, let me know if I’m on to something.&#160; Actually, if Dmitri is on to something.&#160; Either way, I want to hear from you.&#160; Thanks.</p>

  <h3>Additional Monad Learning Resources</h3>

  <ul>
    <li><a href="http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx">http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx</a> </li>

    <li><a href="http://www.infoq.com/presentations/Demystifying-Monads">http://www.infoq.com/presentations/Demystifying-Monads</a> </li>

    <li><a href="http://importantshock.wordpress.com/2009/01/18/jquery-is-a-monad/">http://importantshock.wordpress.com/2009/01/18/jquery-is-a-monad/</a> </li>

    <li>Also, LINQ is based on monadic principles. </li>
  </ul>
</span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Framework Finally Explained]]></title>
    <link href="http://mkmurray.com/blog/2010/07/14/reactive-framework-finally-explained/"/>
    <updated>2010-07-14T17:59:00-06:00</updated>
    <id>http://mkmurray.com/blog/2010/07/14/reactive-framework-finally-explained</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I have been intrigued by the <a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx">Reactive Extensions for .NET (Rx Framework)</a> for quite a while now, especially the fundamental shift from a “push” data model as opposed to the “pull” model most familiar to us.&#160; I have thought to myself that this must be a game changer in how data and events are consumed in every-day software.&#160; I didn’t quite understand how it all works or how to use it from the few samples I had seen, but I knew if I gave myself a little time to really sit down and look at it, my life would be changed forever.</p>  <p>However, after reading some articles, watching some recorded presentations, and even <a href="http://live.visitmix.com/MIX10/Sessions/FTL01">attending a MIX ‘10 session in-person</a> on the Reactive Extensions, I felt increasingly lost and confused by what this framework could offer me.&#160; I wasn’t understanding some fundamental ideology of the framework and it was jading my learning experience when watching/reading sample code.&#160; Well, I think I have finally figured out what the mental roadblock was and will attempt to explain the framework here as I best as I understand it, in hopes that it can be of help to others not getting what the fuss is all about.&#160; I can sense that I’m not the only one who has been turned off by the unsuccessful attempts by Microsoft to explain this revolutionary framework to the average developer.&#160; Apparently those who had a hand in designing the framework are just so incredibly intelligent that they are having a hard time discerning that the common man is not immediately getting it.</p> <span class="fullpost">   <h3><font face="Courier New">IEnumerable&lt;T&gt;</font>, Meet <font face="Courier New">IObservable&lt;T&gt;</font></h3>    <p>Essentially what Microsoft did is create a <a href="http://en.wikipedia.org/wiki/Duality_(mathematics)">mathematical dual</a> of the <font face="Courier New">IEnumerable</font> and <font face="Courier New">IEnumerator</font> interfaces using <a href="http://en.wikipedia.org/wiki/Category_theory">Category Theory</a>, and named them <font face="Courier New">IObservable</font> and <font face="Courier New">IObserver</font> respectively.&#160; In its bare simplicity, this is done by merely reversing the direction of your arrows in your mathematical functions and compositions.&#160; The following images of a few slides from <a href="http://live.visitmix.com/MIX10/Sessions/FTL01">Erik Meijer’s MIX ‘10 Session</a> that were the best visual explanation I have seen:</p>    <p>Duality Example with De Morgan’s Laws</p>    <p><a href="http://lh6.ggpht.com/_rps657FzHZ0/TD5QDKjrqpI/AAAAAAAAADo/_LP_XWkDId4/s1600-h/rxSlide23.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="rxSlide2" border="0" alt="rxSlide2" src="http://lh5.ggpht.com/_rps657FzHZ0/TD5QDjfchiI/AAAAAAAAADs/etW1caiUFHA/rxSlide2_thumb1.png?imgmax=800" width="441" height="334" /></a></p>    <p>Creating a Dual of <font face="Courier New">IEnumerable</font></p>    <p><a href="http://lh4.ggpht.com/_rps657FzHZ0/TD5QD9tyhyI/AAAAAAAAADw/CG9FYEFDB4Y/s1600-h/rxSlide33.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="rxSlide3" border="0" alt="rxSlide3" src="http://lh4.ggpht.com/_rps657FzHZ0/TD5QEm7T9hI/AAAAAAAAAD0/t_pfOknuY3o/rxSlide3_thumb1.png?imgmax=800" width="441" height="334" /></a></p>    <p>Creating a Dual of <font face="Courier New">IEnumerator</font></p>    <p><a href="http://lh4.ggpht.com/_rps657FzHZ0/TD5QE7KuUwI/AAAAAAAAAD4/tpV314oMx5g/s1600-h/rxSlide43.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="rxSlide4" border="0" alt="rxSlide4" src="http://lh3.ggpht.com/_rps657FzHZ0/TD5QFZd3VjI/AAAAAAAAAD8/9jaGTsA76jQ/rxSlide4_thumb1.png?imgmax=800" width="441" height="333" /></a>&#160;</p>    <p>The reason the mathematical proof part is significant is because we can guarantee that LINQ syntax and operators will work on these new collection and data subscriber interfaces, just like they did with <font face="Courier New">IEnumerable</font> collections in LINQ-to-Objects.&#160; This new LINQ provider is commonly called “LINQ over Events.”</p>    <h3>Reacting to Data is Asynchronous</h3>    <p>This is actually where I think some of the confusion came in for me.&#160; Mostly what I didn’t understand is how you can write LINQ queries into pushed data (already sent and also yet to be sent), when essentially that task is indeterminate by nature.&#160; What I have figured out is that the LINQ syntax is not entirely for the data being pushed, but also used for molding the subscriptions themselves.&#160; What the LINQ syntax provides you is a way to compose, filter, project, aggregate, and throttle data and event subscriptions in a powerful, declarative way.</p>    <p>A common workflow seems to be to create one or more observable collections (and there are <a title="16 Ways to Create IObservables Without Implementing IObservable" href="http://weblogs.asp.net/sweinstein/archive/2010/01/10/16-ways-to-create-iobservables-without-implementing-iobservable.aspx">many ways to do so</a>) and then customize and compose a subscription based on the subscription(s) using LINQ syntax.&#160; All that’s left then is to set the subscription in motion, giving it some sort of callback or lambda expression to be called as data is asynchronously pushed in and processed.</p>    <p>Here is a very simple code example that illustrates this process quite plainly:</p>    <pre class="brush: csharp">using System;
using System.Linq;

namespace TestRX
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var oneNumberPerSecond = Observable.Interval(TimeSpan.FromSeconds(1));

            var numbersTimesTwo = from n in oneNumberPerSecond
                                  select n * 2;

            Console.WriteLine(&quot;Numbers * 2:&quot;);

            numbersTimesTwo.Subscribe(num =&gt;
            {
                Console.WriteLine(num);
            });

            Console.ReadKey();
        }
    }
}</pre>

  <p>It is interesting to watch the code run and think about what it’s actually doing.&#160; It sits on the <font face="Courier New">Console.ReadKey()</font> line while the observable collection is asynchronously pushing data to the lambda expression containing the <font face="Courier New">Console.WriteLine()</font> statement.</p>

  <p>It looks like the Reactive Framework is not just a better way to handle events and pushed data, but it also appears from what I’ve read that it could be used as a nicer API for sending off asynchronous process threads.</p>

  <h3>Additional Reading</h3>

  <p><a href="http://msdn.microsoft.com/en-us/devlabs/default.aspx">Microsoft DevLabs</a> has created the <a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx">Reactive Extensions for .NET</a> (and it’s associated languages), but it has also came up with the Reactive Extensions for Silverlight and JavaScript (<a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx">can be found on same webpage</a>).&#160; This proves very interesting as JavaScript (and Silverlight) tends to be quite event driven because of its close interactions to UI elements in HTML (or XAML).&#160; In fact, one of the most encouraging example use cases that I’ve heard was that of having some HTML text field that you wanted to auto-search as the user types, but not until the user pauses for a second; they can also hit Enter.&#160; What the Reactive Framework could provide you is a way to aggregate more than one event source (alphabetic and Enter key strokes and the timer) into a single event handler using clear, declarative framework statements.</p>

  <p>Here are other links I would recommend for additional examples and explanation:</p>

  <ul>
    <li><a href="http://rxwiki.wikidot.com/101samples">(not yet) 101 Rx Samples – Reactive Framework (Rx) Wiki</a> </li>

    <li><a href="http://www.codeproject.com/KB/Parallel_Programming/RxByExample.aspx">The Reactive Framework by Example – The Code Project</a> </li>

    <li><a href="http://live.visitmix.com/MIX10/Sessions/FTL01">Reactive Extensions for JavaScript – Erik Meijer’s MIX ‘10 Session</a> </li>

    <li><a href="http://www.virtualaltnet.com/Recordings/Show/99">Making the Most of the Reactive Extensions for .NET – Virtual Alt.NET recording with Scott Weinstein</a></li>

    <li><a href="http://channel9.msdn.com/shows/Going+Deep/Expert-to-Expert-Brian-Beckman-and-Erik-Meijer-Inside-the-NET-Reactive-Framework-Rx/">Channel 9 Video with Brian Beckman and Erik Meijer</a></li>
  </ul>

  <p>Enjoy!&#160; Let me know via comments if you start using it for something real cool and useful.</p>
</span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Michael</div>
<div class='content'>
Nice post on a complex topic.  You are indeed correct that there has been confusion around explaining the why and how of Reactive Extensions.  Thanks Mike.</div>
</div>
<div class='comment'>
<div class='author'>Paul</div>
<div class='content'>
Great post on getting started with Rx!  One of the things I&#39;ve been working on is a MVVM framework for Silverlight / WPF that uses the Reactive Extensions - I&#39;ve written about it quite a bit in my blog at http://blog.paulbetts.org/index.php/category/programming/reactive-extensions/ and the code is at github.com/xpaulbettsx/ReactiveXaml ; it&#39;s got some great examples of doing more than just handling events together, I&#39;d love to hear any feedback you&#39;ve got on the project</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
