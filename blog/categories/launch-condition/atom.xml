<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Launch Condition | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/launch-condition/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Setup Bootstrappers]]></title>
    <link href="http://mkmurray.com/blog/2009/11/11/custom-setup-bootstrappers/"/>
    <updated>2009-11-11T15:03:00-07:00</updated>
    <id>http://mkmurray.com/blog/2009/11/11/custom-setup-bootstrappers</id>
    <content type="html"><![CDATA[<div class='post'>
<p>At work, we have a line of desktop products for one of clients installed on the user’s Windows machine via MSI installers.&#160; We use Visual Studio Setup Projects to create the MSI installers.&#160; Visual Studio also provides the ability to create setup bootstrappers to make sure the user has all the prerequisites needed for the MSI install technology and any dependencies required by your desktop product.&#160; These bootstrappers are unmanaged code, because you can’t always depend on the .NET framework already being there (at least not until everyone is off of XP and lower).&#160; I have developed a solution that has worked for the last year or more, but has felt clumsy and slapped together.&#160; Recently I found the <a href="http://dotnetinstaller.codeplex.com/">open source project called dotNetInstaller</a> which has better provided me with the control and flexibility I need for custom logic during bootstrap and install time.&#160; I’ll first introduce you to my “hack” solution.</p> <span class="fullpost">   <p>It has been difficult for me to find ways to tie into the bootstrapper logic workflow to add in custom logic during installs, and Visual Studio is very rigid in its flexibility and basic in its configuration options in this regard.&#160; Until recently, I had settled on writing managed, C# code for this custom logic meant to run before or after the MSI installer, and then creating another unmanaged <font face="Courier New">setup.exe</font> bootstrapper to ensure the .NET framework was installed just so that executable could run.&#160; So the user would run this new unmanaged <font face="Courier New">setup.exe</font> bootstrapper (making sure .NET framework was installed), which would then call my managed custom logic executable, which would then call the MSI installer’s unmanaged, Visual Studio-generated <font face="Courier New">setup.exe</font> bootstrapper (ensuring more prerequisites were installed), which would then finally install the MSI, and which would then lastly return to my managed custom logic executable for any post-install, clean up logic.&#160; I describe this solution in full (and how to generate the same bootstrappers that Visual Studio creates using MSBuild outside the IDE) in a StackOverflow.com answer that I submitted:</p>    <p><a title="http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846" href="http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846">http://stackoverflow.com/questions/1106768/how-can-i-reverse-engineer-an-installer-that-was-written-with-ghost-installer/1121846#1121846</a></p>    <p>Well, recently I found the <a href="http://dotnetinstaller.codeplex.com/">dotNetInstaller project on CodePlex.com</a> and have found it to be the control and flexibility I need for custom logic when bootstrapping installers.&#160; Not only does it give you great control over prerequisite install order, it also gives you the ability to run code after MSI install and to also filter on CPU architecture types, OS versions, and other registry or file system conditions.&#160; I have currently setup branching scenarios for the prerequisites based on if the user has a 32-bit (x86) or 64-bit (x64) OS.&#160; This utility will even let you brand the bootstrapper with a banner and icon, which is a change of pace from the plain and unlabeled bootstrapper that Visual Studio and MSBuild produce.</p>    <p>If you have custom bootstrapping needs, I have to highly recommend you give dotNetInstaller a look.&#160; Hopefully it will prove as flexible and powerful for your needs as it has for mine.</p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Registry Launch Condition in VS 2005 Deployment Project]]></title>
    <link href="http://mkmurray.com/blog/2008/01/18/registry-launch-condition-in-vs-2005-deployment-project/"/>
    <updated>2008-01-18T17:09:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/01/18/registry-launch-condition-in-vs-2005-deployment-project</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I have a Visual Studio 2005 deployment project where I wanted to add a launch condition that would check the registry for a key before continuing.&#160; This article is really straight forward about how to do that:&#160; <a title="http://msdn2.microsoft.com/en-us/library/4awx1f1d(VS.80).aspx" href="http://msdn2.microsoft.com/en-us/library/4awx1f1d(VS.80).aspx">http://msdn2.microsoft.com/en-us/library/4awx1f1d(VS.80).aspx</a></p>  <p>However, every time I put the registry path in, it would never find the key upon install.&#160; So the key was located at something like <font face="Courier New">HKLM\SOFTWARE\MyCompany\MyProduct</font> and then there was a Value named <font face="Courier New">Target Path</font> that I wanted to check if it existed.&#160; My understanding (and perhaps I'm wrong) that keys are keys but the values are keys also (at least it seems that way when doing registry stuff through the .NET APIs in C#).&#160; So when I saw the following statement in the above article, I thought the property was for testing the value of a <font face="Courier New">Value</font> (AKA key?):</p>  <blockquote>   <p><font face="Courier New">&quot;Optionally, set the <strong><u>Value</u></strong> property to search for a specific value in the registry key.&quot;</font></p> </blockquote>  <p>Essentially I tried to append the <font face="Courier New">Value</font> to the <font face="Courier New">RegKey</font> path, because I thought the <font face="Courier New">Value</font> property was only for testing the value of the <font face="Courier New">Value</font>.&#160; If you want to test the value of the <font face="Courier New">Value</font>, you do it in the <font face="Courier New">Condition</font> property of the <font face="Courier New">Property</font> created by the registry launch condition.&#160; Is that as clear as mud? </p>  <p>This article is what cleared up my confusion (the 2nd post, the one by Phil Wilson):&#160; <a title="http://www.dotnet247.com/247reference/msgs/49/246890.aspx" href="http://www.dotnet247.com/247reference/msgs/49/246890.aspx">http://www.dotnet247.com/247reference/msgs/49/246890.aspx</a> </p>  <p>I realized that a registry <font face="Courier New">Value</font> should not be part of the <font face="Courier New">RegKey</font> path.</p>  </div>

]]></content>
  </entry>
  
</feed>
