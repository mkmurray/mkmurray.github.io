<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Conferences | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/conferences/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PDC 2008: Watch any Session Free]]></title>
    <link href="http://mkmurray.com/blog/2008/10/31/pdc-2008-watch-any-session-free/"/>
    <updated>2008-10-31T13:55:00-06:00</updated>
    <id>http://mkmurray.com/blog/2008/10/31/pdc-2008-watch-any-session-free</id>
    <content type="html"><![CDATA[<div class='post'>
<p><a href="http://microsoftpdc.com/Default.aspx">Microsoft's PDC 2008 Conference</a> was held this week.&#160; You can go to the following link and watch any session absolutely free on just about any Microsoft development technology or environment that you can think of:</p>  <p><a title="https://sessions.microsoftpdc.com/public/timeline.aspx" href="https://sessions.microsoftpdc.com/public/timeline.aspx">https://sessions.microsoftpdc.com/public/timeline.aspx</a></p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ever Heard of Partial Methods?]]></title>
    <link href="http://mkmurray.com/blog/2008/10/24/ever-heard-of-partial-methods/"/>
    <updated>2008-10-24T15:42:00-06:00</updated>
    <id>http://mkmurray.com/blog/2008/10/24/ever-heard-of-partial-methods</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I attended an <a href="https://msevents.microsoft.com/CUI/EventDetail.aspx?culture=en-US&amp;eventid=1032390917&amp;flag=3">MSDN Unleashed Event here in Salt Lake City yesterday</a> based mostly on the new bells and whistles in .NET 3.5 SP1 (and consequently Visual Studio 2008 SP1).&#160; I always enjoy the presentations from <a title="Rob Bagby&#39;s Blog" href="http://www.robbagby.com/">Rob Bagby</a>, as he is entertaining to listen to and he is a let's-dive-into-the-code, forget-about-Powerpoint-slides kind of presenter.&#160; He is a <a href="http://msdn.microsoft.com/en-us/bb905078.aspx">Microsoft Developer Evangelist (click Role Descriptions on the right column of the page this link references)</a> for the Rocky Mountain states inland from the Pacific Coast.&#160; That's just the way he rolls.</p>  <p>Anyway, he was trying to add some functionality to <a href="http://weblogs.asp.net/scottgu/archive/2007/12/14/new-asp-net-dynamic-data-support.aspx">ASP.NET Dynamic Data</a> for a demo he was showing during the event, and he mentioned a conversation he had with some of the developers at Redmond about the possibility of partial Properties.&#160; According to his words, the impression he got was that &quot;if partial Properties were added to C#, the whole CLR would catch fire&quot; or some other horrible catastrophe.&#160; But Rob did mention the little-known existence of partial Methods in C# 3.0, which caught my attention and sent me surfing.</p>  <p>See <a title="C# Partial Classes Can Enhance Code Organization" href="http://murrayon.net/2008/10/c-partial-classes-can-enhance-code.html">my last post about partial Classes</a> if you want some background to partial Methods.</p>  <p>The genesis of this new feature is much the same as that of partial Classes, which is primarily for Classes that are auto-generated by code generators in Visual Studio (mainly associated with the numerous designers incorporated into Visual Studio).&#160; In fact, it appears the addition of LINQ may be one reason for this new feature.</p> <span class='fullpost'> <p>Partial Methods seem to be a way to incorporate into your Classes methods that may or may not be implemented, kind of a way to stub out areas where another developer could inject specific logic they require into a pipeline of statements they didn't write.&#160; Partial Methods can only reside in partial Classes, and can only have one declaration and up to one optional implementation.&#160; They must be <font face="Courier New">private</font>, have a <font face="Courier New">void</font> return value, and there are quite a few modifiers that cannot be used on a partial method.&#160; For a more comprehensive detailing of these restrictions (and explanations why), see this blog post by <a title="Bart De Smet&#39;s Blog" href="http://community.bartdesmet.net/blogs/bart/default.aspx">Bart De Smet</a> that I read to learn about this new feature:</p>  <p><a title="http://community.bartdesmet.net/blogs/bart/archive/2007/07/28/c-3-0-partial-methods-what-why-and-how.aspx" href="http://community.bartdesmet.net/blogs/bart/archive/2007/07/28/c-3-0-partial-methods-what-why-and-how.aspx">http://community.bartdesmet.net/blogs/bart/archive/2007/07/28/c-3-0-partial-methods-what-why-and-how.aspx</a></p>  <p>Apparently, LINQ-to-SQL makes use of this new language feature to allow the developer to plug their own business logic validation rules without modifying the auto-generated code directly.&#160; If you go to a LINQ-to-SQL generated Class, you will find a C# <font face="Courier New">region</font> named &quot;<font face="Courier New">Extensibility Method Definitions</font>,&quot; which are partial Method declarations (see first image below).&#160; This allows you to make a separate file that is a partial Class of the LINQ-to-SQL generated class and include an implementation for one of these partial Methods, which are by default unimplemented.&#160; It appears LINQ-to-SQL allows you to plug into some of the setters of the generated object Properties that map to columns in the original SQL database table.&#160; The following images are taken from Bart's blog post and are LINQ-to-SQL generated objects based on some of the DB structure for <a href="http://msdn.microsoft.com/en-us/vsts2008/products/bb933758.aspx">Team Foundation Server</a>:</p>  <p>Here are some partial Method declarations in a LINQ-to-SQL generated Class called <font face="Courier New">BuildCoverage</font>:</p>  <p><img src="http://www.bartdesmet.net/images/C3.0partialmethodsWhatwhyandhow_CE94/image_12.png" /></p>  <p>And here is the view of the LINQ-to-SQL generated object in the designer so you can see that most of these partial Methods are based on the object's Properties:</p>  <p><img src="http://www.bartdesmet.net/images/C3.0partialmethodsWhatwhyandhow_CE94/image_11.png" /></p>  <p>Here is a look at a Property setter calling these unimplemented partial Methods:</p>  <p><img height="300" alt="" src="http://lh6.ggpht.com/charliebrown928/SQJBYPObp4I/AAAAAAAAACI/AMWxncxDMH4/image%5B6%5D.png?imgmax=800" width="426" /> </p>  <p>And if you wanted to implement one of these partial Methods, you get nice intellisense from Visual Studio:</p>  <p><img height="390" alt="" src="http://lh6.ggpht.com/charliebrown928/SQJBYU4Ki7I/AAAAAAAAACM/sG09khAFfKY/image%5B14%5D.png?imgmax=800" width="431" /> </p>  <p>And I suppose this finished implementation of the partial Method would throw a <font face="Courier New">NotImplementedException</font> after the Property has already been modified? Hopefully this is where some of that LINQ-to-SQL transactional stuff kicks in...or perhaps Bart meant to implement the <font face="Courier New">OnAssemblyNameChanging</font> partial Method instead?</p>  <p><img height="313" alt="" src="http://lh3.ggpht.com/charliebrown928/SQJBYpve4lI/AAAAAAAAACQ/PsaT9nM4x6k/image%5B20%5D.png?imgmax=800" width="436" /> </p>  <p>This is definitely an interesting new feature in the C# language.&#160; I'll have to keep my eye out for a really compelling use of this feature; I'm not very convinced this is the right way (or even the most common way) for using LINQ-to-SQL generated objects as if they were your Data Model objects and then insert your business logic in the above manner.&#160; Still, this is quite a thought provoking new feature.</p> </span>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Esteban Araya</div>
<div class='content'>
Intersting stuff. I really like the idea of giving other people hooks into your code; I'm not sure partial methods are the best way to accomplish that.</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
