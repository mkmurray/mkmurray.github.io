<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Windows Forms | Mike Murray]]></title>
  <link href="http://mkmurray.com/blog/categories/windows-forms/atom.xml" rel="self"/>
  <link href="http://mkmurray.com/"/>
  <updated>2012-12-15T15:41:41-07:00</updated>
  <id>http://mkmurray.com/</id>
  <author>
    <name><![CDATA[Mike Murray]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BeginInvoke Methods and OneWay Attribute]]></title>
    <link href="http://mkmurray.com/blog/2009/05/21/begininvoke-methods-and-oneway-attribute/"/>
    <updated>2009-05-21T16:29:00-06:00</updated>
    <id>http://mkmurray.com/blog/2009/05/21/begininvoke-methods-and-oneway-attribute</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In a previous post I talked about <a href="http://murrayon.net/2008/01/windows-forms-ui-threading.html">Windows Forms UI Threading</a> using delegates.&#160; Recently I needed to replicate what I had learned, and I happened to do so without reviewing my notes in the former blog post.&#160; Apparently I didn’t remember everything I had learned and became confused over thread invocation techniques, introducing a bug into my thread messaging.&#160; The UI thread was blocking while the background worker thread was processing.</p>  <p>The cause was related to figuring out which <font face="Courier New">BeginInvoke</font> method to call when kicking off the worker thread, the <font face="Courier New">BeginInvoke</font> of the <font face="Courier New">Form</font> object or the <font face="Courier New">BeginInvoke</font> of the delegate.&#160; The answer is the <font face="Courier New">BeginInvoke</font> method of the delegate.&#160; All of the examples linked to in the previous post had it right, but I got it mixed up with making <font face="Courier New">Invoke</font> or <font face="Courier New">BeginInvoke</font> calls from the background thread using the <font face="Courier New">Form</font> object’s version of these methods.&#160; If you don’t care whether your messaging from the background thread is synchronous or asynchronous, then you can use either methods and you can use the ones from the <font face="Courier New">Form</font> object.</p>  <p>The problem is using these <font face="Courier New">Form</font> object methods in order to kick off your background worker thread.&#160; The description of the <font face="Courier New">BeginInvoke</font> method on the <font face="Courier New">Form</font> object states that it <font face="Courier New">“executes the specified delegate asynchronously on the thread that the control’s underlying handle was created on.”</font>&#160; I translate this to mean that calling your <font face="Courier New">Form</font> object’s <font face="Courier New">BeginInvoke</font> will process on your UI thread.&#160; Apparently the delegate <font face="Courier New">BeginInvoke</font> method has no such wording in its description.</p> <span class='fullpost'> <p>Rereading <a title="Safe, Simple Multithreading in Windows Forms, Part 1" href="http://msdn.microsoft.com/en-us/library/ms951089.aspx">this MSDN article</a> from the former post and reading the <font face="Courier New">Form</font> object’s <font face="Courier New">BeginInvoke</font> method description which I quoted above set me straight and got rid of my blocking UI problem (again).</p>  <p>During this research session, I came across another informative resource when trying to figure out what was meant by potential resource leaks when using <font face="Courier New">BeginInvoke</font> with out later calling <font face="Courier New">EndInvoke</font>.&#160; From reading the article, I gather you can substitute the <font face="Courier New">EndInvoke</font> call with the <a title="OneWayAttribute Class" href="http://msdn.microsoft.com/en-us/library/system.runtime.remoting.messaging.onewayattribute.aspx"><font face="Courier New">OneWay</font> attribute</a><font face="Courier New"><font color="#333333"><font face="Verdana"></font></font></font> on the method being invoked, as long as it has a <font face="Courier New">void</font> return signature and no <font face="Courier New">ref</font> nor <font face="Courier New">out</font> parameters.&#160; Please let me know if my interpretation is wrong.&#160; I added the attribute to my code in the applicable spots and have seen no side effects of doing so.&#160; Here is the article on read mentioning this attribute:</p>  <p><a href="http://weblogs.asp.net/rosherove/pages/DefensiveEventPublishing.aspx">Defensive Event Publishing in .NET – Part I</a></p> </span>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Forms UI Threading]]></title>
    <link href="http://mkmurray.com/blog/2008/01/18/windows-forms-ui-threading/"/>
    <updated>2008-01-18T16:34:00-07:00</updated>
    <id>http://mkmurray.com/blog/2008/01/18/windows-forms-ui-threading</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I fixed a UI issue we were having where some work was being done and it was updating a progress bar, but it wasn't correctly painting the rest of the labels and other static UI elements.&#160; It's best to let the UI do it's thing on the main thread, and then spawn off a worker thread in the background, allowing them to communicate with each other through delegates.</p> <span class='fullpost'> <p>Here is a very nicely done, informative article about delegates that I should have read (I probably would have gotten to my solution quicker and surpassed my trial and error issues):&#160; <a title="http://www.ondotnet.com/pub/a/dotnet/2002/11/04/delegates.htm" href="http://www.ondotnet.com/pub/a/dotnet/2002/11/04/delegates.htm">http://www.ondotnet.com/pub/a/dotnet/2002/11/04/delegates.htm</a></p>  <p>I used the following two articles as a basis for my fix:</p>  <ul>   <li><a title="http://msdn2.microsoft.com/en-us/library/ms951089.aspx" href="http://msdn2.microsoft.com/en-us/library/ms951089.aspx">http://msdn2.microsoft.com/en-us/library/ms951089.aspx</a> </li>    <li><a title="http://www.ondotnet.com/pub/a/dotnet/2003/02/24/asyncdelegates.html?page=1" href="http://www.ondotnet.com/pub/a/dotnet/2003/02/24/asyncdelegates.html?page=1">http://www.ondotnet.com/pub/a/dotnet/2003/02/24/asyncdelegates.html?page=1</a> </li> </ul>  <p>However, I didn't end up using the <font face="Courier New">MulticastDelegate</font> class at all in my solution.&#160; It's not really necessary, and I couldn't get it to work when I tried to extend or inherit from it.&#160; The following article says you can't anyway, unless you are a compiler or some similar tool:&#160; <a title="http://msdn2.microsoft.com/en-us/library/system.multicastdelegate.aspx" href="http://msdn2.microsoft.com/en-us/library/system.multicastdelegate.aspx">http://msdn2.microsoft.com/en-us/library/system.multicastdelegate.aspx</a></p>  <p>This link has a cool helper class for asynchronous delegates, though I didn't use it:&#160; <a title="http://peach.ease.lsoft.com/scripts/wa.exe?A2=ind0302B&amp;L=ADVANCED-DOTNET&amp;T=0&amp;F=&amp;S=&amp;P=31992" href="http://peach.ease.lsoft.com/scripts/wa.exe?A2=ind0302B&amp;L=ADVANCED-DOTNET&amp;T=0&amp;F=&amp;S=&amp;P=31992">http://peach.ease.lsoft.com/scripts/wa.exe?A2=ind0302B&amp;L=ADVANCED-DOTNET&amp;T=0&amp;F=&amp;S=&amp;P=31992</a></p>  <p>Good luck.</p>  <p><strong><u>FOLLOWUP (05/21/09)</u>:&#160; </strong>I have some further clarifications about how to properly invoke delegates to a new background thread in this post:</p>  <p><a href="http://murrayon.net/2009/05/begininvoke-methods-and-oneway.html">BeginInvoke Methods and OneWay Attribute</a></p> </span>  </div>

]]></content>
  </entry>
  
</feed>
